local ffi = require 'ffi'
ffi.cdef [[
/* OpenGL typedef */
typedef char GLchar;
typedef double GLclampd;
typedef double GLdouble;
typedef float GLclampf;
typedef float GLfloat;
typedef int GLint;
typedef int GLsizei;
typedef int64_t GLint64;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef short GLshort;
typedef signed char GLbyte;
typedef struct __GLsync *GLsync;
typedef uint64_t GLuint64;
typedef uint64_t GLuint64EXT;
typedef unsigned char GLboolean;
typedef unsigned char GLubyte;
typedef unsigned int GLbitfield;
typedef unsigned int GLenum;
typedef unsigned int GLuint;
typedef unsigned short GLhalf;
typedef unsigned short GLushort;
typedef void GLvoid;

/* OpenGL defines */
enum {
FALSE    = 0,
TRUE     = 1,
ZERO     = 0,
ONE      = 1,
NONE     = 0,
NO_ERROR = 0,
ACTIVE_ATOMIC_COUNTER_BUFFERS  = 0x92D9,
ACTIVE_ATTRIBUTES              = 0x8B89,
ACTIVE_ATTRIBUTE_MAX_LENGTH    = 0x8B8A,
ACTIVE_PROGRAM                 = 0x8259,
ACTIVE_RESOURCES               = 0x92F5,
ACTIVE_SUBROUTINES             = 0x8DE5,
ACTIVE_SUBROUTINE_MAX_LENGTH   = 0x8E48,
ACTIVE_SUBROUTINE_UNIFORMS     = 0x8DE6,
ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47,
ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49,
ACTIVE_TEXTURE                 = 0x84E0,
ACTIVE_UNIFORMS                = 0x8B86,
ACTIVE_UNIFORM_BLOCKS          = 0x8A36,
ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35,
ACTIVE_UNIFORM_MAX_LENGTH      = 0x8B87,
ACTIVE_VARIABLES               = 0x9305,
ALIASED_LINE_WIDTH_RANGE       = 0x846E,
ALL_BARRIER_BITS               = 0xFFFFFFFF,
ALL_SHADER_BITS                = 0xFFFFFFFF,
ALPHA                          = 0x1906,
ALREADY_SIGNALED               = 0x911A,
ALWAYS                         = 0x0207,
AND                            = 0x1501,
AND_INVERTED                   = 0x1504,
AND_REVERSE                    = 0x1502,
ANY_SAMPLES_PASSED             = 0x8C2F,
ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A,
ARRAY_BUFFER                   = 0x8892,
ARRAY_BUFFER_BINDING           = 0x8894,
ARRAY_SIZE                     = 0x92FB,
ARRAY_STRIDE                   = 0x92FE,
ATOMIC_COUNTER_BARRIER_BIT     = 0x00001000,
ATOMIC_COUNTER_BUFFER          = 0x92C0,
ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5,
ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6,
ATOMIC_COUNTER_BUFFER_BINDING  = 0x92C1,
ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4,
ATOMIC_COUNTER_BUFFER_INDEX    = 0x9301,
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED,
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB,
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA,
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8,
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9,
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7,
ATOMIC_COUNTER_BUFFER_SIZE     = 0x92C3,
ATOMIC_COUNTER_BUFFER_START    = 0x92C2,
ATTACHED_SHADERS               = 0x8B85,
AUTO_GENERATE_MIPMAP           = 0x8295,
BACK                           = 0x0405,
BACK_LEFT                      = 0x0402,
BACK_RIGHT                     = 0x0403,
BGR                            = 0x80E0,
BGRA                           = 0x80E1,
BGRA_INTEGER                   = 0x8D9B,
BGR_INTEGER                    = 0x8D9A,
BLEND                          = 0x0BE2,
BLEND_COLOR                    = 0x8005,
BLEND_DST                      = 0x0BE0,
BLEND_DST_ALPHA                = 0x80CA,
BLEND_DST_RGB                  = 0x80C8,
BLEND_EQUATION                 = 0x8009,
BLEND_EQUATION_ALPHA           = 0x883D,
BLEND_EQUATION_RGB             = 0x8009,
BLEND_SRC                      = 0x0BE1,
BLEND_SRC_ALPHA                = 0x80CB,
BLEND_SRC_RGB                  = 0x80C9,
BLOCK_INDEX                    = 0x92FD,
BLUE                           = 0x1905,
BLUE_INTEGER                   = 0x8D96,
BOOL                           = 0x8B56,
BOOL_VEC2                      = 0x8B57,
BOOL_VEC3                      = 0x8B58,
BOOL_VEC4                      = 0x8B59,
BUFFER                         = 0x82E0,
BUFFER_ACCESS                  = 0x88BB,
BUFFER_ACCESS_FLAGS            = 0x911F,
BUFFER_BINDING                 = 0x9302,
BUFFER_DATA_SIZE               = 0x9303,
BUFFER_IMMUTABLE_STORAGE       = 0x821F,
BUFFER_MAPPED                  = 0x88BC,
BUFFER_MAP_LENGTH              = 0x9120,
BUFFER_MAP_OFFSET              = 0x9121,
BUFFER_MAP_POINTER             = 0x88BD,
BUFFER_SIZE                    = 0x8764,
BUFFER_STORAGE_FLAGS           = 0x8220,
BUFFER_UPDATE_BARRIER_BIT      = 0x00000200,
BUFFER_USAGE                   = 0x8765,
BUFFER_VARIABLE                = 0x92E5,
BYTE                           = 0x1400,
CAVEAT_SUPPORT                 = 0x82B8,
CCW                            = 0x0901,
CLAMP_READ_COLOR               = 0x891C,
CLAMP_TO_BORDER                = 0x812D,
CLAMP_TO_EDGE                  = 0x812F,
CLEAR                          = 0x1500,
CLEAR_BUFFER                   = 0x82B4,
CLEAR_TEXTURE                  = 0x9365,
CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000,
CLIENT_STORAGE_BIT             = 0x0200,
CLIPPING_INPUT_PRIMITIVES_ARB  = 0x82F6,
CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7,
CLIP_DEPTH_MODE                = 0x935D,
CLIP_DISTANCE0                 = 0x3000,
CLIP_DISTANCE1                 = 0x3001,
CLIP_DISTANCE2                 = 0x3002,
CLIP_DISTANCE3                 = 0x3003,
CLIP_DISTANCE4                 = 0x3004,
CLIP_DISTANCE5                 = 0x3005,
CLIP_DISTANCE6                 = 0x3006,
CLIP_DISTANCE7                 = 0x3007,
CLIP_ORIGIN                    = 0x935C,
COLOR                          = 0x1800,
COLOR_ATTACHMENT0              = 0x8CE0,
COLOR_ATTACHMENT1              = 0x8CE1,
COLOR_ATTACHMENT10             = 0x8CEA,
COLOR_ATTACHMENT11             = 0x8CEB,
COLOR_ATTACHMENT12             = 0x8CEC,
COLOR_ATTACHMENT13             = 0x8CED,
COLOR_ATTACHMENT14             = 0x8CEE,
COLOR_ATTACHMENT15             = 0x8CEF,
COLOR_ATTACHMENT16             = 0x8CF0,
COLOR_ATTACHMENT17             = 0x8CF1,
COLOR_ATTACHMENT18             = 0x8CF2,
COLOR_ATTACHMENT19             = 0x8CF3,
COLOR_ATTACHMENT2              = 0x8CE2,
COLOR_ATTACHMENT20             = 0x8CF4,
COLOR_ATTACHMENT21             = 0x8CF5,
COLOR_ATTACHMENT22             = 0x8CF6,
COLOR_ATTACHMENT23             = 0x8CF7,
COLOR_ATTACHMENT24             = 0x8CF8,
COLOR_ATTACHMENT25             = 0x8CF9,
COLOR_ATTACHMENT26             = 0x8CFA,
COLOR_ATTACHMENT27             = 0x8CFB,
COLOR_ATTACHMENT28             = 0x8CFC,
COLOR_ATTACHMENT29             = 0x8CFD,
COLOR_ATTACHMENT3              = 0x8CE3,
COLOR_ATTACHMENT30             = 0x8CFE,
COLOR_ATTACHMENT31             = 0x8CFF,
COLOR_ATTACHMENT4              = 0x8CE4,
COLOR_ATTACHMENT5              = 0x8CE5,
COLOR_ATTACHMENT6              = 0x8CE6,
COLOR_ATTACHMENT7              = 0x8CE7,
COLOR_ATTACHMENT8              = 0x8CE8,
COLOR_ATTACHMENT9              = 0x8CE9,
COLOR_BUFFER_BIT               = 0x00004000,
COLOR_CLEAR_VALUE              = 0x0C22,
COLOR_COMPONENTS               = 0x8283,
COLOR_ENCODING                 = 0x8296,
COLOR_LOGIC_OP                 = 0x0BF2,
COLOR_RENDERABLE               = 0x8286,
COLOR_WRITEMASK                = 0x0C23,
COMMAND_BARRIER_BIT            = 0x00000040,
COMPARE_REF_TO_TEXTURE         = 0x884E,
COMPATIBLE_SUBROUTINES         = 0x8E4B,
COMPILE_STATUS                 = 0x8B81,
COMPRESSED_R11_EAC             = 0x9270,
COMPRESSED_RED                 = 0x8225,
COMPRESSED_RED_RGTC1           = 0x8DBB,
COMPRESSED_RG                  = 0x8226,
COMPRESSED_RG11_EAC            = 0x9272,
COMPRESSED_RGB                 = 0x84ED,
COMPRESSED_RGB8_ETC2           = 0x9274,
COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
COMPRESSED_RGBA                = 0x84EE,
COMPRESSED_RGBA8_ETC2_EAC      = 0x9278,
COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,
COMPRESSED_RGBA_ASTC_10x5_KHR  = 0x93B8,
COMPRESSED_RGBA_ASTC_10x6_KHR  = 0x93B9,
COMPRESSED_RGBA_ASTC_10x8_KHR  = 0x93BA,
COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,
COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,
COMPRESSED_RGBA_ASTC_4x4_KHR   = 0x93B0,
COMPRESSED_RGBA_ASTC_5x4_KHR   = 0x93B1,
COMPRESSED_RGBA_ASTC_5x5_KHR   = 0x93B2,
COMPRESSED_RGBA_ASTC_6x5_KHR   = 0x93B3,
COMPRESSED_RGBA_ASTC_6x6_KHR   = 0x93B4,
COMPRESSED_RGBA_ASTC_8x5_KHR   = 0x93B5,
COMPRESSED_RGBA_ASTC_8x6_KHR   = 0x93B6,
COMPRESSED_RGBA_ASTC_8x8_KHR   = 0x93B7,
COMPRESSED_RGBA_BPTC_UNORM     = 0x8E8C,
COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C,
COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E,
COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F,
COMPRESSED_RG_RGTC2            = 0x8DBD,
COMPRESSED_SIGNED_R11_EAC      = 0x9271,
COMPRESSED_SIGNED_RED_RGTC1    = 0x8DBC,
COMPRESSED_SIGNED_RG11_EAC     = 0x9273,
COMPRESSED_SIGNED_RG_RGTC2     = 0x8DBE,
COMPRESSED_SRGB                = 0x8C48,
COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,
COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,
COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,
COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,
COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,
COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,
COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,
COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,
COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,
COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,
COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,
COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,
COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,
COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,
COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
COMPRESSED_SRGB8_ETC2          = 0x9275,
COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
COMPRESSED_SRGB_ALPHA          = 0x8C49,
COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D,
COMPRESSED_TEXTURE_FORMATS     = 0x86A3,
COMPUTE_SHADER                 = 0x91B9,
COMPUTE_SHADER_BIT             = 0x00000020,
COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5,
COMPUTE_SUBROUTINE             = 0x92ED,
COMPUTE_SUBROUTINE_UNIFORM     = 0x92F3,
COMPUTE_TEXTURE                = 0x82A0,
COMPUTE_WORK_GROUP_SIZE        = 0x8267,
CONDITION_SATISFIED            = 0x911C,
CONSTANT_ALPHA                 = 0x8003,
CONSTANT_COLOR                 = 0x8001,
CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002,
CONTEXT_CORE_PROFILE_BIT       = 0x00000001,
CONTEXT_FLAGS                  = 0x821E,
CONTEXT_FLAG_DEBUG_BIT         = 0x00000002,
CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001,
CONTEXT_FLAG_NO_ERROR_BIT_KHR  = 0x00000008,
CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004,
CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004,
CONTEXT_LOST                   = 0x0507,
CONTEXT_PROFILE_MASK           = 0x9126,
CONTEXT_RELEASE_BEHAVIOR       = 0x82FB,
CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC,
CONTEXT_ROBUST_ACCESS          = 0x90F3,
COPY                           = 0x1503,
COPY_INVERTED                  = 0x150C,
COPY_READ_BUFFER               = 0x8F36,
COPY_READ_BUFFER_BINDING       = 0x8F36,
COPY_WRITE_BUFFER              = 0x8F37,
COPY_WRITE_BUFFER_BINDING      = 0x8F37,
CULL_FACE                      = 0x0B44,
CULL_FACE_MODE                 = 0x0B45,
CURRENT_PROGRAM                = 0x8B8D,
CURRENT_QUERY                  = 0x8865,
CURRENT_VERTEX_ATTRIB          = 0x8626,
CW                             = 0x0900,
DEBUG_CALLBACK_FUNCTION        = 0x8244,
DEBUG_CALLBACK_FUNCTION_ARB    = 0x8244,
DEBUG_CALLBACK_USER_PARAM      = 0x8245,
DEBUG_CALLBACK_USER_PARAM_ARB  = 0x8245,
DEBUG_GROUP_STACK_DEPTH        = 0x826D,
DEBUG_LOGGED_MESSAGES          = 0x9145,
DEBUG_LOGGED_MESSAGES_ARB      = 0x9145,
DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243,
DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243,
DEBUG_OUTPUT                   = 0x92E0,
DEBUG_OUTPUT_SYNCHRONOUS       = 0x8242,
DEBUG_OUTPUT_SYNCHRONOUS_ARB   = 0x8242,
DEBUG_SEVERITY_HIGH            = 0x9146,
DEBUG_SEVERITY_HIGH_ARB        = 0x9146,
DEBUG_SEVERITY_LOW             = 0x9148,
DEBUG_SEVERITY_LOW_ARB         = 0x9148,
DEBUG_SEVERITY_MEDIUM          = 0x9147,
DEBUG_SEVERITY_MEDIUM_ARB      = 0x9147,
DEBUG_SEVERITY_NOTIFICATION    = 0x826B,
DEBUG_SOURCE_API               = 0x8246,
DEBUG_SOURCE_API_ARB           = 0x8246,
DEBUG_SOURCE_APPLICATION       = 0x824A,
DEBUG_SOURCE_APPLICATION_ARB   = 0x824A,
DEBUG_SOURCE_OTHER             = 0x824B,
DEBUG_SOURCE_OTHER_ARB         = 0x824B,
DEBUG_SOURCE_SHADER_COMPILER   = 0x8248,
DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248,
DEBUG_SOURCE_THIRD_PARTY       = 0x8249,
DEBUG_SOURCE_THIRD_PARTY_ARB   = 0x8249,
DEBUG_SOURCE_WINDOW_SYSTEM     = 0x8247,
DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247,
DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D,
DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D,
DEBUG_TYPE_ERROR               = 0x824C,
DEBUG_TYPE_ERROR_ARB           = 0x824C,
DEBUG_TYPE_MARKER              = 0x8268,
DEBUG_TYPE_OTHER               = 0x8251,
DEBUG_TYPE_OTHER_ARB           = 0x8251,
DEBUG_TYPE_PERFORMANCE         = 0x8250,
DEBUG_TYPE_PERFORMANCE_ARB     = 0x8250,
DEBUG_TYPE_POP_GROUP           = 0x826A,
DEBUG_TYPE_PORTABILITY         = 0x824F,
DEBUG_TYPE_PORTABILITY_ARB     = 0x824F,
DEBUG_TYPE_PUSH_GROUP          = 0x8269,
DEBUG_TYPE_UNDEFINED_BEHAVIOR  = 0x824E,
DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E,
DECR                           = 0x1E03,
DECR_WRAP                      = 0x8508,
DELETE_STATUS                  = 0x8B80,
DEPTH                          = 0x1801,
DEPTH24_STENCIL8               = 0x88F0,
DEPTH32F_STENCIL8              = 0x8CAD,
DEPTH_ATTACHMENT               = 0x8D00,
DEPTH_BUFFER_BIT               = 0x00000100,
DEPTH_CLAMP                    = 0x864F,
DEPTH_CLEAR_VALUE              = 0x0B73,
DEPTH_COMPONENT                = 0x1902,
DEPTH_COMPONENT16              = 0x81A5,
DEPTH_COMPONENT24              = 0x81A6,
DEPTH_COMPONENT32              = 0x81A7,
DEPTH_COMPONENT32F             = 0x8CAC,
DEPTH_COMPONENTS               = 0x8284,
DEPTH_FUNC                     = 0x0B74,
DEPTH_RANGE                    = 0x0B70,
DEPTH_RENDERABLE               = 0x8287,
DEPTH_STENCIL                  = 0x84F9,
DEPTH_STENCIL_ATTACHMENT       = 0x821A,
DEPTH_STENCIL_TEXTURE_MODE     = 0x90EA,
DEPTH_TEST                     = 0x0B71,
DEPTH_WRITEMASK                = 0x0B72,
DISPATCH_INDIRECT_BUFFER       = 0x90EE,
DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF,
DITHER                         = 0x0BD0,
DONT_CARE                      = 0x1100,
DOUBLE                         = 0x140A,
DOUBLEBUFFER                   = 0x0C32,
DOUBLE_MAT2                    = 0x8F46,
DOUBLE_MAT2x3                  = 0x8F49,
DOUBLE_MAT2x4                  = 0x8F4A,
DOUBLE_MAT3                    = 0x8F47,
DOUBLE_MAT3x2                  = 0x8F4B,
DOUBLE_MAT3x4                  = 0x8F4C,
DOUBLE_MAT4                    = 0x8F48,
DOUBLE_MAT4x2                  = 0x8F4D,
DOUBLE_MAT4x3                  = 0x8F4E,
DOUBLE_VEC2                    = 0x8FFC,
DOUBLE_VEC3                    = 0x8FFD,
DOUBLE_VEC4                    = 0x8FFE,
DRAW_BUFFER                    = 0x0C01,
DRAW_BUFFER0                   = 0x8825,
DRAW_BUFFER1                   = 0x8826,
DRAW_BUFFER10                  = 0x882F,
DRAW_BUFFER11                  = 0x8830,
DRAW_BUFFER12                  = 0x8831,
DRAW_BUFFER13                  = 0x8832,
DRAW_BUFFER14                  = 0x8833,
DRAW_BUFFER15                  = 0x8834,
DRAW_BUFFER2                   = 0x8827,
DRAW_BUFFER3                   = 0x8828,
DRAW_BUFFER4                   = 0x8829,
DRAW_BUFFER5                   = 0x882A,
DRAW_BUFFER6                   = 0x882B,
DRAW_BUFFER7                   = 0x882C,
DRAW_BUFFER8                   = 0x882D,
DRAW_BUFFER9                   = 0x882E,
DRAW_FRAMEBUFFER               = 0x8CA9,
DRAW_FRAMEBUFFER_BINDING       = 0x8CA6,
DRAW_INDIRECT_BUFFER           = 0x8F3F,
DRAW_INDIRECT_BUFFER_BINDING   = 0x8F43,
DST_ALPHA                      = 0x0304,
DST_COLOR                      = 0x0306,
DYNAMIC_COPY                   = 0x88EA,
DYNAMIC_DRAW                   = 0x88E8,
DYNAMIC_READ                   = 0x88E9,
DYNAMIC_STORAGE_BIT            = 0x0100,
ELEMENT_ARRAY_BARRIER_BIT      = 0x00000002,
ELEMENT_ARRAY_BUFFER           = 0x8893,
ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895,
EQUAL                          = 0x0202,
EQUIV                          = 0x1509,
EXTENSIONS                     = 0x1F03,
FASTEST                        = 0x1101,
FILL                           = 0x1B02,
FILTER                         = 0x829A,
FIRST_VERTEX_CONVENTION        = 0x8E4D,
FIXED                          = 0x140C,
FIXED_ONLY                     = 0x891D,
FLOAT                          = 0x1406,
FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
FLOAT_MAT2                     = 0x8B5A,
FLOAT_MAT2x3                   = 0x8B65,
FLOAT_MAT2x4                   = 0x8B66,
FLOAT_MAT3                     = 0x8B5B,
FLOAT_MAT3x2                   = 0x8B67,
FLOAT_MAT3x4                   = 0x8B68,
FLOAT_MAT4                     = 0x8B5C,
FLOAT_MAT4x2                   = 0x8B69,
FLOAT_MAT4x3                   = 0x8B6A,
FLOAT_VEC2                     = 0x8B50,
FLOAT_VEC3                     = 0x8B51,
FLOAT_VEC4                     = 0x8B52,
FRACTIONAL_EVEN                = 0x8E7C,
FRACTIONAL_ODD                 = 0x8E7B,
FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D,
FRAGMENT_SHADER                = 0x8B30,
FRAGMENT_SHADER_BIT            = 0x00000002,
FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4,
FRAGMENT_SUBROUTINE            = 0x92EC,
FRAGMENT_SUBROUTINE_UNIFORM    = 0x92F2,
FRAGMENT_TEXTURE               = 0x829F,
FRAMEBUFFER                    = 0x8D40,
FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215,
FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214,
FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,
FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211,
FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216,
FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213,
FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7,
FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1,
FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,
FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,
FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217,
FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3,
FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,
FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2,
FRAMEBUFFER_BARRIER_BIT        = 0x00000400,
FRAMEBUFFER_BINDING            = 0x8CA6,
FRAMEBUFFER_BLEND              = 0x828B,
FRAMEBUFFER_COMPLETE           = 0x8CD5,
FRAMEBUFFER_DEFAULT            = 0x8218,
FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314,
FRAMEBUFFER_DEFAULT_HEIGHT     = 0x9311,
FRAMEBUFFER_DEFAULT_LAYERS     = 0x9312,
FRAMEBUFFER_DEFAULT_SAMPLES    = 0x9313,
FRAMEBUFFER_DEFAULT_WIDTH      = 0x9310,
FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6,
FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB,
FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8,
FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7,
FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56,
FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC,
FRAMEBUFFER_RENDERABLE         = 0x8289,
FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A,
FRAMEBUFFER_SRGB               = 0x8DB9,
FRAMEBUFFER_UNDEFINED          = 0x8219,
FRAMEBUFFER_UNSUPPORTED        = 0x8CDD,
FRONT                          = 0x0404,
FRONT_AND_BACK                 = 0x0408,
FRONT_FACE                     = 0x0B46,
FRONT_LEFT                     = 0x0400,
FRONT_RIGHT                    = 0x0401,
FULL_SUPPORT                   = 0x82B7,
FUNC_ADD                       = 0x8006,
FUNC_REVERSE_SUBTRACT          = 0x800B,
FUNC_SUBTRACT                  = 0x800A,
GEOMETRY_INPUT_TYPE            = 0x8917,
GEOMETRY_OUTPUT_TYPE           = 0x8918,
GEOMETRY_SHADER                = 0x8DD9,
GEOMETRY_SHADER_BIT            = 0x00000004,
GEOMETRY_SHADER_INVOCATIONS    = 0x887F,
GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3,
GEOMETRY_SUBROUTINE            = 0x92EB,
GEOMETRY_SUBROUTINE_UNIFORM    = 0x92F1,
GEOMETRY_TEXTURE               = 0x829E,
GEOMETRY_VERTICES_OUT          = 0x8916,
GEQUAL                         = 0x0206,
GET_TEXTURE_IMAGE_FORMAT       = 0x8291,
GET_TEXTURE_IMAGE_TYPE         = 0x8292,
GREATER                        = 0x0204,
GREEN                          = 0x1904,
GREEN_INTEGER                  = 0x8D95,
GUILTY_CONTEXT_RESET           = 0x8253,
GUILTY_CONTEXT_RESET_ARB       = 0x8253,
HALF_FLOAT                     = 0x140B,
HIGH_FLOAT                     = 0x8DF2,
HIGH_INT                       = 0x8DF5,
IMAGE_1D                       = 0x904C,
IMAGE_1D_ARRAY                 = 0x9052,
IMAGE_2D                       = 0x904D,
IMAGE_2D_ARRAY                 = 0x9053,
IMAGE_2D_MULTISAMPLE           = 0x9055,
IMAGE_2D_MULTISAMPLE_ARRAY     = 0x9056,
IMAGE_2D_RECT                  = 0x904F,
IMAGE_3D                       = 0x904E,
IMAGE_BINDING_ACCESS           = 0x8F3E,
IMAGE_BINDING_FORMAT           = 0x906E,
IMAGE_BINDING_LAYER            = 0x8F3D,
IMAGE_BINDING_LAYERED          = 0x8F3C,
IMAGE_BINDING_LEVEL            = 0x8F3B,
IMAGE_BINDING_NAME             = 0x8F3A,
IMAGE_BUFFER                   = 0x9051,
IMAGE_CLASS_10_10_10_2         = 0x82C3,
IMAGE_CLASS_11_11_10           = 0x82C2,
IMAGE_CLASS_1_X_16             = 0x82BE,
IMAGE_CLASS_1_X_32             = 0x82BB,
IMAGE_CLASS_1_X_8              = 0x82C1,
IMAGE_CLASS_2_X_16             = 0x82BD,
IMAGE_CLASS_2_X_32             = 0x82BA,
IMAGE_CLASS_2_X_8              = 0x82C0,
IMAGE_CLASS_4_X_16             = 0x82BC,
IMAGE_CLASS_4_X_32             = 0x82B9,
IMAGE_CLASS_4_X_8              = 0x82BF,
IMAGE_COMPATIBILITY_CLASS      = 0x82A8,
IMAGE_CUBE                     = 0x9050,
IMAGE_CUBE_MAP_ARRAY           = 0x9054,
IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9,
IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8,
IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7,
IMAGE_PIXEL_FORMAT             = 0x82A9,
IMAGE_PIXEL_TYPE               = 0x82AA,
IMAGE_TEXEL_SIZE               = 0x82A7,
IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
INCR                           = 0x1E02,
INCR_WRAP                      = 0x8507,
INFO_LOG_LENGTH                = 0x8B84,
INNOCENT_CONTEXT_RESET         = 0x8254,
INNOCENT_CONTEXT_RESET_ARB     = 0x8254,
INT                            = 0x1404,
INTERLEAVED_ATTRIBS            = 0x8C8C,
INTERNALFORMAT_ALPHA_SIZE      = 0x8274,
INTERNALFORMAT_ALPHA_TYPE      = 0x827B,
INTERNALFORMAT_BLUE_SIZE       = 0x8273,
INTERNALFORMAT_BLUE_TYPE       = 0x827A,
INTERNALFORMAT_DEPTH_SIZE      = 0x8275,
INTERNALFORMAT_DEPTH_TYPE      = 0x827C,
INTERNALFORMAT_GREEN_SIZE      = 0x8272,
INTERNALFORMAT_GREEN_TYPE      = 0x8279,
INTERNALFORMAT_PREFERRED       = 0x8270,
INTERNALFORMAT_RED_SIZE        = 0x8271,
INTERNALFORMAT_RED_TYPE        = 0x8278,
INTERNALFORMAT_SHARED_SIZE     = 0x8277,
INTERNALFORMAT_STENCIL_SIZE    = 0x8276,
INTERNALFORMAT_STENCIL_TYPE    = 0x827D,
INTERNALFORMAT_SUPPORTED       = 0x826F,
INT_2_10_10_10_REV             = 0x8D9F,
INT_IMAGE_1D                   = 0x9057,
INT_IMAGE_1D_ARRAY             = 0x905D,
INT_IMAGE_2D                   = 0x9058,
INT_IMAGE_2D_ARRAY             = 0x905E,
INT_IMAGE_2D_MULTISAMPLE       = 0x9060,
INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061,
INT_IMAGE_2D_RECT              = 0x905A,
INT_IMAGE_3D                   = 0x9059,
INT_IMAGE_BUFFER               = 0x905C,
INT_IMAGE_CUBE                 = 0x905B,
INT_IMAGE_CUBE_MAP_ARRAY       = 0x905F,
INT_SAMPLER_1D                 = 0x8DC9,
INT_SAMPLER_1D_ARRAY           = 0x8DCE,
INT_SAMPLER_2D                 = 0x8DCA,
INT_SAMPLER_2D_ARRAY           = 0x8DCF,
INT_SAMPLER_2D_MULTISAMPLE     = 0x9109,
INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C,
INT_SAMPLER_2D_RECT            = 0x8DCD,
INT_SAMPLER_3D                 = 0x8DCB,
INT_SAMPLER_BUFFER             = 0x8DD0,
INT_SAMPLER_CUBE               = 0x8DCC,
INT_SAMPLER_CUBE_MAP_ARRAY     = 0x900E,
INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E,
INT_VEC2                       = 0x8B53,
INT_VEC3                       = 0x8B54,
INT_VEC4                       = 0x8B55,
INVALID_ENUM                   = 0x0500,
INVALID_FRAMEBUFFER_OPERATION  = 0x0506,
INVALID_INDEX                  = 0xFFFFFFFF,
INVALID_OPERATION              = 0x0502,
INVALID_VALUE                  = 0x0501,
INVERT                         = 0x150A,
ISOLINES                       = 0x8E7A,
IS_PER_PATCH                   = 0x92E7,
IS_ROW_MAJOR                   = 0x9300,
KEEP                           = 0x1E00,
LAST_VERTEX_CONVENTION         = 0x8E4E,
LAYER_PROVOKING_VERTEX         = 0x825E,
LEFT                           = 0x0406,
LEQUAL                         = 0x0203,
LESS                           = 0x0201,
LINE                           = 0x1B01,
LINEAR                         = 0x2601,
LINEAR_MIPMAP_LINEAR           = 0x2703,
LINEAR_MIPMAP_NEAREST          = 0x2701,
LINES                          = 0x0001,
LINES_ADJACENCY                = 0x000A,
LINE_LOOP                      = 0x0002,
LINE_SMOOTH                    = 0x0B20,
LINE_SMOOTH_HINT               = 0x0C52,
LINE_STRIP                     = 0x0003,
LINE_STRIP_ADJACENCY           = 0x000B,
LINE_WIDTH                     = 0x0B21,
LINE_WIDTH_GRANULARITY         = 0x0B23,
LINE_WIDTH_RANGE               = 0x0B22,
LINK_STATUS                    = 0x8B82,
LOCATION                       = 0x930E,
LOCATION_COMPONENT             = 0x934A,
LOCATION_INDEX                 = 0x930F,
LOGIC_OP_MODE                  = 0x0BF0,
LOSE_CONTEXT_ON_RESET          = 0x8252,
LOSE_CONTEXT_ON_RESET_ARB      = 0x8252,
LOWER_LEFT                     = 0x8CA1,
LOW_FLOAT                      = 0x8DF0,
LOW_INT                        = 0x8DF3,
MAJOR_VERSION                  = 0x821B,
MANUAL_GENERATE_MIPMAP         = 0x8294,
MAP_COHERENT_BIT               = 0x0080,
MAP_FLUSH_EXPLICIT_BIT         = 0x0010,
MAP_INVALIDATE_BUFFER_BIT      = 0x0008,
MAP_INVALIDATE_RANGE_BIT       = 0x0004,
MAP_PERSISTENT_BIT             = 0x0040,
MAP_READ_BIT                   = 0x0001,
MAP_UNSYNCHRONIZED_BIT         = 0x0020,
MAP_WRITE_BIT                  = 0x0002,
MATRIX_STRIDE                  = 0x92FF,
MAX                            = 0x8008,
MAX_3D_TEXTURE_SIZE            = 0x8073,
MAX_ARRAY_TEXTURE_LAYERS       = 0x88FF,
MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC,
MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8,
MAX_CLIP_DISTANCES             = 0x0D32,
MAX_COLOR_ATTACHMENTS          = 0x8CDF,
MAX_COLOR_TEXTURE_SAMPLES      = 0x910E,
MAX_COMBINED_ATOMIC_COUNTERS   = 0x92D7,
MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1,
MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA,
MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
MAX_COMBINED_DIMENSIONS        = 0x8282,
MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,
MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32,
MAX_COMBINED_IMAGE_UNIFORMS    = 0x90CF,
MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39,
MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39,
MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC,
MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E,
MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F,
MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
MAX_COMBINED_UNIFORM_BLOCKS    = 0x8A2E,
MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31,
MAX_COMPUTE_ATOMIC_COUNTERS    = 0x8265,
MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB,
MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF,
MAX_COMPUTE_IMAGE_UNIFORMS     = 0x91BD,
MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB,
MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262,
MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC,
MAX_COMPUTE_UNIFORM_BLOCKS     = 0x91BB,
MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263,
MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344,
MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345,
MAX_COMPUTE_WORK_GROUP_COUNT   = 0x91BE,
MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB,
MAX_COMPUTE_WORK_GROUP_SIZE    = 0x91BF,
MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C,
MAX_CULL_DISTANCES             = 0x82F9,
MAX_DEBUG_GROUP_STACK_DEPTH    = 0x826C,
MAX_DEBUG_LOGGED_MESSAGES      = 0x9144,
MAX_DEBUG_LOGGED_MESSAGES_ARB  = 0x9144,
MAX_DEBUG_MESSAGE_LENGTH       = 0x9143,
MAX_DEBUG_MESSAGE_LENGTH_ARB   = 0x9143,
MAX_DEPTH                      = 0x8280,
MAX_DEPTH_TEXTURE_SAMPLES      = 0x910F,
MAX_DRAW_BUFFERS               = 0x8824,
MAX_DUAL_SOURCE_DRAW_BUFFERS   = 0x88FC,
MAX_ELEMENTS_INDICES           = 0x80E9,
MAX_ELEMENTS_VERTICES          = 0x80E8,
MAX_ELEMENT_INDEX              = 0x8D6B,
MAX_FRAGMENT_ATOMIC_COUNTERS   = 0x92D6,
MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0,
MAX_FRAGMENT_IMAGE_UNIFORMS    = 0x90CE,
MAX_FRAGMENT_INPUT_COMPONENTS  = 0x9125,
MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C,
MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA,
MAX_FRAGMENT_UNIFORM_BLOCKS    = 0x8A2D,
MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
MAX_FRAGMENT_UNIFORM_VECTORS   = 0x8DFD,
MAX_FRAMEBUFFER_HEIGHT         = 0x9316,
MAX_FRAMEBUFFER_LAYERS         = 0x9317,
MAX_FRAMEBUFFER_SAMPLES        = 0x9318,
MAX_FRAMEBUFFER_WIDTH          = 0x9315,
MAX_GEOMETRY_ATOMIC_COUNTERS   = 0x92D5,
MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF,
MAX_GEOMETRY_IMAGE_UNIFORMS    = 0x90CD,
MAX_GEOMETRY_INPUT_COMPONENTS  = 0x9123,
MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124,
MAX_GEOMETRY_OUTPUT_VERTICES   = 0x8DE0,
MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A,
MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7,
MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29,
MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1,
MAX_GEOMETRY_UNIFORM_BLOCKS    = 0x8A2C,
MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF,
MAX_HEIGHT                     = 0x827F,
MAX_IMAGE_SAMPLES              = 0x906D,
MAX_IMAGE_UNITS                = 0x8F38,
MAX_INTEGER_SAMPLES            = 0x9110,
MAX_LABEL_LENGTH               = 0x82E8,
MAX_LAYERS                     = 0x8281,
MAX_NAME_LENGTH                = 0x92F6,
MAX_NUM_ACTIVE_VARIABLES       = 0x92F7,
MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8,
MAX_PATCH_VERTICES             = 0x8E7D,
MAX_PROGRAM_TEXEL_OFFSET       = 0x8905,
MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F,
MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F,
MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F,
MAX_RECTANGLE_TEXTURE_SIZE     = 0x84F8,
MAX_RENDERBUFFER_SIZE          = 0x84E8,
MAX_SAMPLES                    = 0x8D57,
MAX_SAMPLE_MASK_WORDS          = 0x8E59,
MAX_SERVER_WAIT_TIMEOUT        = 0x9111,
MAX_SHADER_STORAGE_BLOCK_SIZE  = 0x90DE,
MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD,
MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199,
MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A,
MAX_SPARSE_TEXTURE_SIZE_ARB    = 0x9198,
MAX_SUBROUTINES                = 0x8DE7,
MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8,
MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3,
MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD,
MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB,
MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C,
MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83,
MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8,
MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81,
MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85,
MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89,
MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F,
MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4,
MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE,
MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC,
MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D,
MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86,
MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9,
MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82,
MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A,
MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80,
MAX_TESS_GEN_LEVEL             = 0x8E7E,
MAX_TESS_PATCH_COMPONENTS      = 0x8E84,
MAX_TEXTURE_BUFFER_SIZE        = 0x8C2B,
MAX_TEXTURE_IMAGE_UNITS        = 0x8872,
MAX_TEXTURE_LOD_BIAS           = 0x84FD,
MAX_TEXTURE_SIZE               = 0x0D33,
MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70,
MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A,
MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B,
MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80,
MAX_UNIFORM_BLOCK_SIZE         = 0x8A30,
MAX_UNIFORM_BUFFER_BINDINGS    = 0x8A2F,
MAX_UNIFORM_LOCATIONS          = 0x826E,
MAX_VARYING_COMPONENTS         = 0x8B4B,
MAX_VARYING_FLOATS             = 0x8B4B,
MAX_VARYING_VECTORS            = 0x8DFC,
MAX_VERTEX_ATOMIC_COUNTERS     = 0x92D2,
MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC,
MAX_VERTEX_ATTRIBS             = 0x8869,
MAX_VERTEX_ATTRIB_BINDINGS     = 0x82DA,
MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
MAX_VERTEX_ATTRIB_STRIDE       = 0x82E5,
MAX_VERTEX_IMAGE_UNIFORMS      = 0x90CA,
MAX_VERTEX_OUTPUT_COMPONENTS   = 0x9122,
MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6,
MAX_VERTEX_STREAMS             = 0x8E71,
MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
MAX_VERTEX_UNIFORM_BLOCKS      = 0x8A2B,
MAX_VERTEX_UNIFORM_COMPONENTS  = 0x8B4A,
MAX_VERTEX_UNIFORM_VECTORS     = 0x8DFB,
MAX_VIEWPORTS                  = 0x825B,
MAX_VIEWPORT_DIMS              = 0x0D3A,
MAX_WIDTH                      = 0x827E,
MEDIUM_FLOAT                   = 0x8DF1,
MEDIUM_INT                     = 0x8DF4,
MIN                            = 0x8007,
MINOR_VERSION                  = 0x821C,
MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B,
MIN_MAP_BUFFER_ALIGNMENT       = 0x90BC,
MIN_PROGRAM_TEXEL_OFFSET       = 0x8904,
MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E,
MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E,
MIN_SAMPLE_SHADING_VALUE       = 0x8C37,
MIN_SAMPLE_SHADING_VALUE_ARB   = 0x8C37,
MIPMAP                         = 0x8293,
MIRRORED_REPEAT                = 0x8370,
MIRROR_CLAMP_TO_EDGE           = 0x8743,
MULTISAMPLE                    = 0x809D,
NAMED_STRING_LENGTH_ARB        = 0x8DE9,
NAMED_STRING_TYPE_ARB          = 0x8DEA,
NAME_LENGTH                    = 0x92F9,
NAND                           = 0x150E,
NEAREST                        = 0x2600,
NEAREST_MIPMAP_LINEAR          = 0x2702,
NEAREST_MIPMAP_NEAREST         = 0x2700,
NEGATIVE_ONE_TO_ONE            = 0x935E,
NEVER                          = 0x0200,
NICEST                         = 0x1102,
NOOP                           = 0x1505,
NOR                            = 0x1508,
NOTEQUAL                       = 0x0205,
NO_RESET_NOTIFICATION          = 0x8261,
NO_RESET_NOTIFICATION_ARB      = 0x8261,
NUM_ACTIVE_VARIABLES           = 0x9304,
NUM_COMPATIBLE_SUBROUTINES     = 0x8E4A,
NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
NUM_EXTENSIONS                 = 0x821D,
NUM_PROGRAM_BINARY_FORMATS     = 0x87FE,
NUM_SAMPLE_COUNTS              = 0x9380,
NUM_SHADER_BINARY_FORMATS      = 0x8DF9,
NUM_SHADING_LANGUAGE_VERSIONS  = 0x82E9,
NUM_SPARSE_LEVELS_ARB          = 0x91AA,
NUM_VIRTUAL_PAGE_SIZES_ARB     = 0x91A8,
OBJECT_TYPE                    = 0x9112,
OFFSET                         = 0x92FC,
ONE_MINUS_CONSTANT_ALPHA       = 0x8004,
ONE_MINUS_CONSTANT_COLOR       = 0x8002,
ONE_MINUS_DST_ALPHA            = 0x0305,
ONE_MINUS_DST_COLOR            = 0x0307,
ONE_MINUS_SRC1_ALPHA           = 0x88FB,
ONE_MINUS_SRC1_COLOR           = 0x88FA,
ONE_MINUS_SRC_ALPHA            = 0x0303,
ONE_MINUS_SRC_COLOR            = 0x0301,
OR                             = 0x1507,
OR_INVERTED                    = 0x150D,
OR_REVERSE                     = 0x150B,
OUT_OF_MEMORY                  = 0x0505,
PACK_ALIGNMENT                 = 0x0D05,
PACK_COMPRESSED_BLOCK_DEPTH    = 0x912D,
PACK_COMPRESSED_BLOCK_HEIGHT   = 0x912C,
PACK_COMPRESSED_BLOCK_SIZE     = 0x912E,
PACK_COMPRESSED_BLOCK_WIDTH    = 0x912B,
PACK_IMAGE_HEIGHT              = 0x806C,
PACK_LSB_FIRST                 = 0x0D01,
PACK_ROW_LENGTH                = 0x0D02,
PACK_SKIP_IMAGES               = 0x806B,
PACK_SKIP_PIXELS               = 0x0D04,
PACK_SKIP_ROWS                 = 0x0D03,
PACK_SWAP_BYTES                = 0x0D00,
PARAMETER_BUFFER_ARB           = 0x80EE,
PARAMETER_BUFFER_BINDING_ARB   = 0x80EF,
PATCHES                        = 0x000E,
PATCH_DEFAULT_INNER_LEVEL      = 0x8E73,
PATCH_DEFAULT_OUTER_LEVEL      = 0x8E74,
PATCH_VERTICES                 = 0x8E72,
PIXEL_BUFFER_BARRIER_BIT       = 0x00000080,
PIXEL_PACK_BUFFER              = 0x88EB,
PIXEL_PACK_BUFFER_BINDING      = 0x88ED,
PIXEL_UNPACK_BUFFER            = 0x88EC,
PIXEL_UNPACK_BUFFER_BINDING    = 0x88EF,
POINT                          = 0x1B00,
POINTS                         = 0x0000,
POINT_FADE_THRESHOLD_SIZE      = 0x8128,
POINT_SIZE                     = 0x0B11,
POINT_SIZE_GRANULARITY         = 0x0B13,
POINT_SIZE_RANGE               = 0x0B12,
POINT_SPRITE_COORD_ORIGIN      = 0x8CA0,
POLYGON_MODE                   = 0x0B40,
POLYGON_OFFSET_FACTOR          = 0x8038,
POLYGON_OFFSET_FILL            = 0x8037,
POLYGON_OFFSET_LINE            = 0x2A02,
POLYGON_OFFSET_POINT           = 0x2A01,
POLYGON_OFFSET_UNITS           = 0x2A00,
POLYGON_SMOOTH                 = 0x0B41,
POLYGON_SMOOTH_HINT            = 0x0C53,
PRIMITIVES_GENERATED           = 0x8C87,
PRIMITIVES_SUBMITTED_ARB       = 0x82EF,
PRIMITIVE_RESTART              = 0x8F9D,
PRIMITIVE_RESTART_FIXED_INDEX  = 0x8D69,
PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221,
PRIMITIVE_RESTART_INDEX        = 0x8F9E,
PROGRAM                        = 0x82E2,
PROGRAM_BINARY_FORMATS         = 0x87FF,
PROGRAM_BINARY_LENGTH          = 0x8741,
PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257,
PROGRAM_INPUT                  = 0x92E3,
PROGRAM_OUTPUT                 = 0x92E4,
PROGRAM_PIPELINE               = 0x82E4,
PROGRAM_PIPELINE_BINDING       = 0x825A,
PROGRAM_POINT_SIZE             = 0x8642,
PROGRAM_SEPARABLE              = 0x8258,
PROVOKING_VERTEX               = 0x8E4F,
PROXY_TEXTURE_1D               = 0x8063,
PROXY_TEXTURE_1D_ARRAY         = 0x8C19,
PROXY_TEXTURE_2D               = 0x8064,
PROXY_TEXTURE_2D_ARRAY         = 0x8C1B,
PROXY_TEXTURE_2D_MULTISAMPLE   = 0x9101,
PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103,
PROXY_TEXTURE_3D               = 0x8070,
PROXY_TEXTURE_CUBE_MAP         = 0x851B,
PROXY_TEXTURE_CUBE_MAP_ARRAY   = 0x900B,
PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B,
PROXY_TEXTURE_RECTANGLE        = 0x84F7,
QUADS                          = 0x0007,
QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C,
QUERY                          = 0x82E3,
QUERY_BUFFER                   = 0x9192,
QUERY_BUFFER_BARRIER_BIT       = 0x00008000,
QUERY_BUFFER_BINDING           = 0x9193,
QUERY_BY_REGION_NO_WAIT        = 0x8E16,
QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A,
QUERY_BY_REGION_WAIT           = 0x8E15,
QUERY_BY_REGION_WAIT_INVERTED  = 0x8E19,
QUERY_COUNTER_BITS             = 0x8864,
QUERY_NO_WAIT                  = 0x8E14,
QUERY_NO_WAIT_INVERTED         = 0x8E18,
QUERY_RESULT                   = 0x8866,
QUERY_RESULT_AVAILABLE         = 0x8867,
QUERY_RESULT_NO_WAIT           = 0x9194,
QUERY_TARGET                   = 0x82EA,
QUERY_WAIT                     = 0x8E13,
QUERY_WAIT_INVERTED            = 0x8E17,
R11F_G11F_B10F                 = 0x8C3A,
R16                            = 0x822A,
R16F                           = 0x822D,
R16I                           = 0x8233,
R16UI                          = 0x8234,
R16_SNORM                      = 0x8F98,
R32F                           = 0x822E,
R32I                           = 0x8235,
R32UI                          = 0x8236,
R3_G3_B2                       = 0x2A10,
R8                             = 0x8229,
R8I                            = 0x8231,
R8UI                           = 0x8232,
R8_SNORM                       = 0x8F94,
RASTERIZER_DISCARD             = 0x8C89,
READ_BUFFER                    = 0x0C02,
READ_FRAMEBUFFER               = 0x8CA8,
READ_FRAMEBUFFER_BINDING       = 0x8CAA,
READ_ONLY                      = 0x88B8,
READ_PIXELS                    = 0x828C,
READ_PIXELS_FORMAT             = 0x828D,
READ_PIXELS_TYPE               = 0x828E,
READ_WRITE                     = 0x88BA,
RED                            = 0x1903,
RED_INTEGER                    = 0x8D94,
REFERENCED_BY_COMPUTE_SHADER   = 0x930B,
REFERENCED_BY_FRAGMENT_SHADER  = 0x930A,
REFERENCED_BY_GEOMETRY_SHADER  = 0x9309,
REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307,
REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308,
REFERENCED_BY_VERTEX_SHADER    = 0x9306,
RENDERBUFFER                   = 0x8D41,
RENDERBUFFER_ALPHA_SIZE        = 0x8D53,
RENDERBUFFER_BINDING           = 0x8CA7,
RENDERBUFFER_BLUE_SIZE         = 0x8D52,
RENDERBUFFER_DEPTH_SIZE        = 0x8D54,
RENDERBUFFER_GREEN_SIZE        = 0x8D51,
RENDERBUFFER_HEIGHT            = 0x8D43,
RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44,
RENDERBUFFER_RED_SIZE          = 0x8D50,
RENDERBUFFER_SAMPLES           = 0x8CAB,
RENDERBUFFER_STENCIL_SIZE      = 0x8D55,
RENDERBUFFER_WIDTH             = 0x8D42,
RENDERER                       = 0x1F01,
REPEAT                         = 0x2901,
REPLACE                        = 0x1E01,
RESET_NOTIFICATION_STRATEGY    = 0x8256,
RESET_NOTIFICATION_STRATEGY_ARB = 0x8256,
RG                             = 0x8227,
RG16                           = 0x822C,
RG16F                          = 0x822F,
RG16I                          = 0x8239,
RG16UI                         = 0x823A,
RG16_SNORM                     = 0x8F99,
RG32F                          = 0x8230,
RG32I                          = 0x823B,
RG32UI                         = 0x823C,
RG8                            = 0x822B,
RG8I                           = 0x8237,
RG8UI                          = 0x8238,
RG8_SNORM                      = 0x8F95,
RGB                            = 0x1907,
RGB10                          = 0x8052,
RGB10_A2                       = 0x8059,
RGB10_A2UI                     = 0x906F,
RGB12                          = 0x8053,
RGB16                          = 0x8054,
RGB16F                         = 0x881B,
RGB16I                         = 0x8D89,
RGB16UI                        = 0x8D77,
RGB16_SNORM                    = 0x8F9A,
RGB32F                         = 0x8815,
RGB32I                         = 0x8D83,
RGB32UI                        = 0x8D71,
RGB4                           = 0x804F,
RGB5                           = 0x8050,
RGB565                         = 0x8D62,
RGB5_A1                        = 0x8057,
RGB8                           = 0x8051,
RGB8I                          = 0x8D8F,
RGB8UI                         = 0x8D7D,
RGB8_SNORM                     = 0x8F96,
RGB9_E5                        = 0x8C3D,
RGBA                           = 0x1908,
RGBA12                         = 0x805A,
RGBA16                         = 0x805B,
RGBA16F                        = 0x881A,
RGBA16I                        = 0x8D88,
RGBA16UI                       = 0x8D76,
RGBA16_SNORM                   = 0x8F9B,
RGBA2                          = 0x8055,
RGBA32F                        = 0x8814,
RGBA32I                        = 0x8D82,
RGBA32UI                       = 0x8D70,
RGBA4                          = 0x8056,
RGBA8                          = 0x8058,
RGBA8I                         = 0x8D8E,
RGBA8UI                        = 0x8D7C,
RGBA8_SNORM                    = 0x8F97,
RGBA_INTEGER                   = 0x8D99,
RGB_INTEGER                    = 0x8D98,
RG_INTEGER                     = 0x8228,
RIGHT                          = 0x0407,
SAMPLER                        = 0x82E6,
SAMPLER_1D                     = 0x8B5D,
SAMPLER_1D_ARRAY               = 0x8DC0,
SAMPLER_1D_ARRAY_SHADOW        = 0x8DC3,
SAMPLER_1D_SHADOW              = 0x8B61,
SAMPLER_2D                     = 0x8B5E,
SAMPLER_2D_ARRAY               = 0x8DC1,
SAMPLER_2D_ARRAY_SHADOW        = 0x8DC4,
SAMPLER_2D_MULTISAMPLE         = 0x9108,
SAMPLER_2D_MULTISAMPLE_ARRAY   = 0x910B,
SAMPLER_2D_RECT                = 0x8B63,
SAMPLER_2D_RECT_SHADOW         = 0x8B64,
SAMPLER_2D_SHADOW              = 0x8B62,
SAMPLER_3D                     = 0x8B5F,
SAMPLER_BINDING                = 0x8919,
SAMPLER_BUFFER                 = 0x8DC2,
SAMPLER_CUBE                   = 0x8B60,
SAMPLER_CUBE_MAP_ARRAY         = 0x900C,
SAMPLER_CUBE_MAP_ARRAY_ARB     = 0x900C,
SAMPLER_CUBE_MAP_ARRAY_SHADOW  = 0x900D,
SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D,
SAMPLER_CUBE_SHADOW            = 0x8DC5,
SAMPLES                        = 0x80A9,
SAMPLES_PASSED                 = 0x8914,
SAMPLE_ALPHA_TO_COVERAGE       = 0x809E,
SAMPLE_ALPHA_TO_ONE            = 0x809F,
SAMPLE_BUFFERS                 = 0x80A8,
SAMPLE_COVERAGE                = 0x80A0,
SAMPLE_COVERAGE_INVERT         = 0x80AB,
SAMPLE_COVERAGE_VALUE          = 0x80AA,
SAMPLE_MASK                    = 0x8E51,
SAMPLE_MASK_VALUE              = 0x8E52,
SAMPLE_POSITION                = 0x8E50,
SAMPLE_SHADING                 = 0x8C36,
SAMPLE_SHADING_ARB             = 0x8C36,
SCISSOR_BOX                    = 0x0C10,
SCISSOR_TEST                   = 0x0C11,
SEPARATE_ATTRIBS               = 0x8C8D,
SET                            = 0x150F,
SHADER                         = 0x82E1,
SHADER_BINARY_FORMATS          = 0x8DF8,
SHADER_COMPILER                = 0x8DFA,
SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020,
SHADER_IMAGE_ATOMIC            = 0x82A6,
SHADER_IMAGE_LOAD              = 0x82A4,
SHADER_IMAGE_STORE             = 0x82A5,
SHADER_INCLUDE_ARB             = 0x8DAE,
SHADER_SOURCE_LENGTH           = 0x8B88,
SHADER_STORAGE_BARRIER_BIT     = 0x00002000,
SHADER_STORAGE_BLOCK           = 0x92E6,
SHADER_STORAGE_BUFFER          = 0x90D2,
SHADER_STORAGE_BUFFER_BINDING  = 0x90D3,
SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF,
SHADER_STORAGE_BUFFER_SIZE     = 0x90D5,
SHADER_STORAGE_BUFFER_START    = 0x90D4,
SHADER_TYPE                    = 0x8B4F,
SHADING_LANGUAGE_VERSION       = 0x8B8C,
SHORT                          = 0x1402,
SIGNALED                       = 0x9119,
SIGNED_NORMALIZED              = 0x8F9C,
SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC,
SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE,
SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD,
SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF,
SMOOTH_LINE_WIDTH_GRANULARITY  = 0x0B23,
SMOOTH_LINE_WIDTH_RANGE        = 0x0B22,
SMOOTH_POINT_SIZE_GRANULARITY  = 0x0B13,
SMOOTH_POINT_SIZE_RANGE        = 0x0B12,
SPARSE_BUFFER_PAGE_SIZE_ARB    = 0x82F8,
SPARSE_STORAGE_BIT_ARB         = 0x0400,
SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9,
SRC1_ALPHA                     = 0x8589,
SRC1_COLOR                     = 0x88F9,
SRC_ALPHA                      = 0x0302,
SRC_ALPHA_SATURATE             = 0x0308,
SRC_COLOR                      = 0x0300,
SRGB                           = 0x8C40,
SRGB8                          = 0x8C41,
SRGB8_ALPHA8                   = 0x8C43,
SRGB_ALPHA                     = 0x8C42,
SRGB_DECODE_ARB                = 0x8299,
SRGB_READ                      = 0x8297,
SRGB_WRITE                     = 0x8298,
STACK_OVERFLOW                 = 0x0503,
STACK_UNDERFLOW                = 0x0504,
STATIC_COPY                    = 0x88E6,
STATIC_DRAW                    = 0x88E4,
STATIC_READ                    = 0x88E5,
STENCIL                        = 0x1802,
STENCIL_ATTACHMENT             = 0x8D20,
STENCIL_BACK_FAIL              = 0x8801,
STENCIL_BACK_FUNC              = 0x8800,
STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802,
STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803,
STENCIL_BACK_REF               = 0x8CA3,
STENCIL_BACK_VALUE_MASK        = 0x8CA4,
STENCIL_BACK_WRITEMASK         = 0x8CA5,
STENCIL_BUFFER_BIT             = 0x00000400,
STENCIL_CLEAR_VALUE            = 0x0B91,
STENCIL_COMPONENTS             = 0x8285,
STENCIL_FAIL                   = 0x0B94,
STENCIL_FUNC                   = 0x0B92,
STENCIL_INDEX                  = 0x1901,
STENCIL_INDEX1                 = 0x8D46,
STENCIL_INDEX16                = 0x8D49,
STENCIL_INDEX4                 = 0x8D47,
STENCIL_INDEX8                 = 0x8D48,
STENCIL_PASS_DEPTH_FAIL        = 0x0B95,
STENCIL_PASS_DEPTH_PASS        = 0x0B96,
STENCIL_REF                    = 0x0B97,
STENCIL_RENDERABLE             = 0x8288,
STENCIL_TEST                   = 0x0B90,
STENCIL_VALUE_MASK             = 0x0B93,
STENCIL_WRITEMASK              = 0x0B98,
STEREO                         = 0x0C33,
STREAM_COPY                    = 0x88E2,
STREAM_DRAW                    = 0x88E0,
STREAM_READ                    = 0x88E1,
SUBPIXEL_BITS                  = 0x0D50,
SYNC_CL_EVENT_ARB              = 0x8240,
SYNC_CL_EVENT_COMPLETE_ARB     = 0x8241,
SYNC_CONDITION                 = 0x9113,
SYNC_FENCE                     = 0x9116,
SYNC_FLAGS                     = 0x9115,
SYNC_FLUSH_COMMANDS_BIT        = 0x00000001,
SYNC_GPU_COMMANDS_COMPLETE     = 0x9117,
SYNC_STATUS                    = 0x9114,
TESS_CONTROL_OUTPUT_VERTICES   = 0x8E75,
TESS_CONTROL_SHADER            = 0x8E88,
TESS_CONTROL_SHADER_BIT        = 0x00000008,
TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1,
TESS_CONTROL_SUBROUTINE        = 0x92E9,
TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF,
TESS_CONTROL_TEXTURE           = 0x829C,
TESS_EVALUATION_SHADER         = 0x8E87,
TESS_EVALUATION_SHADER_BIT     = 0x00000010,
TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2,
TESS_EVALUATION_SUBROUTINE     = 0x92EA,
TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0,
TESS_EVALUATION_TEXTURE        = 0x829D,
TESS_GEN_MODE                  = 0x8E76,
TESS_GEN_POINT_MODE            = 0x8E79,
TESS_GEN_SPACING               = 0x8E77,
TESS_GEN_VERTEX_ORDER          = 0x8E78,
TEXTURE                        = 0x1702,
TEXTURE0                       = 0x84C0,
TEXTURE1                       = 0x84C1,
TEXTURE10                      = 0x84CA,
TEXTURE11                      = 0x84CB,
TEXTURE12                      = 0x84CC,
TEXTURE13                      = 0x84CD,
TEXTURE14                      = 0x84CE,
TEXTURE15                      = 0x84CF,
TEXTURE16                      = 0x84D0,
TEXTURE17                      = 0x84D1,
TEXTURE18                      = 0x84D2,
TEXTURE19                      = 0x84D3,
TEXTURE2                       = 0x84C2,
TEXTURE20                      = 0x84D4,
TEXTURE21                      = 0x84D5,
TEXTURE22                      = 0x84D6,
TEXTURE23                      = 0x84D7,
TEXTURE24                      = 0x84D8,
TEXTURE25                      = 0x84D9,
TEXTURE26                      = 0x84DA,
TEXTURE27                      = 0x84DB,
TEXTURE28                      = 0x84DC,
TEXTURE29                      = 0x84DD,
TEXTURE3                       = 0x84C3,
TEXTURE30                      = 0x84DE,
TEXTURE31                      = 0x84DF,
TEXTURE4                       = 0x84C4,
TEXTURE5                       = 0x84C5,
TEXTURE6                       = 0x84C6,
TEXTURE7                       = 0x84C7,
TEXTURE8                       = 0x84C8,
TEXTURE9                       = 0x84C9,
TEXTURE_1D                     = 0x0DE0,
TEXTURE_1D_ARRAY               = 0x8C18,
TEXTURE_2D                     = 0x0DE1,
TEXTURE_2D_ARRAY               = 0x8C1A,
TEXTURE_2D_MULTISAMPLE         = 0x9100,
TEXTURE_2D_MULTISAMPLE_ARRAY   = 0x9102,
TEXTURE_3D                     = 0x806F,
TEXTURE_ALPHA_SIZE             = 0x805F,
TEXTURE_ALPHA_TYPE             = 0x8C13,
TEXTURE_BASE_LEVEL             = 0x813C,
TEXTURE_BINDING_1D             = 0x8068,
TEXTURE_BINDING_1D_ARRAY       = 0x8C1C,
TEXTURE_BINDING_2D             = 0x8069,
TEXTURE_BINDING_2D_ARRAY       = 0x8C1D,
TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104,
TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105,
TEXTURE_BINDING_3D             = 0x806A,
TEXTURE_BINDING_BUFFER         = 0x8C2C,
TEXTURE_BINDING_CUBE_MAP       = 0x8514,
TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A,
TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A,
TEXTURE_BINDING_RECTANGLE      = 0x84F6,
TEXTURE_BLUE_SIZE              = 0x805E,
TEXTURE_BLUE_TYPE              = 0x8C12,
TEXTURE_BORDER_COLOR           = 0x1004,
TEXTURE_BUFFER                 = 0x8C2A,
TEXTURE_BUFFER_BINDING         = 0x8C2A,
TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D,
TEXTURE_BUFFER_OFFSET          = 0x919D,
TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F,
TEXTURE_BUFFER_SIZE            = 0x919E,
TEXTURE_COMPARE_FUNC           = 0x884D,
TEXTURE_COMPARE_MODE           = 0x884C,
TEXTURE_COMPRESSED             = 0x86A1,
TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2,
TEXTURE_COMPRESSED_BLOCK_SIZE  = 0x82B3,
TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1,
TEXTURE_COMPRESSED_IMAGE_SIZE  = 0x86A0,
TEXTURE_COMPRESSION_HINT       = 0x84EF,
TEXTURE_CUBE_MAP               = 0x8513,
TEXTURE_CUBE_MAP_ARRAY         = 0x9009,
TEXTURE_CUBE_MAP_ARRAY_ARB     = 0x9009,
TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516,
TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518,
TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A,
TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515,
TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517,
TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519,
TEXTURE_CUBE_MAP_SEAMLESS      = 0x884F,
TEXTURE_DEPTH                  = 0x8071,
TEXTURE_DEPTH_SIZE             = 0x884A,
TEXTURE_DEPTH_TYPE             = 0x8C16,
TEXTURE_FETCH_BARRIER_BIT      = 0x00000008,
TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107,
TEXTURE_GATHER                 = 0x82A2,
TEXTURE_GATHER_SHADOW          = 0x82A3,
TEXTURE_GREEN_SIZE             = 0x805D,
TEXTURE_GREEN_TYPE             = 0x8C11,
TEXTURE_HEIGHT                 = 0x1001,
TEXTURE_IMAGE_FORMAT           = 0x828F,
TEXTURE_IMAGE_TYPE             = 0x8290,
TEXTURE_IMMUTABLE_FORMAT       = 0x912F,
TEXTURE_IMMUTABLE_LEVELS       = 0x82DF,
TEXTURE_INTERNAL_FORMAT        = 0x1003,
TEXTURE_LOD_BIAS               = 0x8501,
TEXTURE_MAG_FILTER             = 0x2800,
TEXTURE_MAX_LEVEL              = 0x813D,
TEXTURE_MAX_LOD                = 0x813B,
TEXTURE_MIN_FILTER             = 0x2801,
TEXTURE_MIN_LOD                = 0x813A,
TEXTURE_RECTANGLE              = 0x84F5,
TEXTURE_RED_SIZE               = 0x805C,
TEXTURE_RED_TYPE               = 0x8C10,
TEXTURE_SAMPLES                = 0x9106,
TEXTURE_SHADOW                 = 0x82A1,
TEXTURE_SHARED_SIZE            = 0x8C3F,
TEXTURE_SPARSE_ARB             = 0x91A6,
TEXTURE_STENCIL_SIZE           = 0x88F1,
TEXTURE_SWIZZLE_A              = 0x8E45,
TEXTURE_SWIZZLE_B              = 0x8E44,
TEXTURE_SWIZZLE_G              = 0x8E43,
TEXTURE_SWIZZLE_R              = 0x8E42,
TEXTURE_SWIZZLE_RGBA           = 0x8E46,
TEXTURE_TARGET                 = 0x1006,
TEXTURE_UPDATE_BARRIER_BIT     = 0x00000100,
TEXTURE_VIEW                   = 0x82B5,
TEXTURE_VIEW_MIN_LAYER         = 0x82DD,
TEXTURE_VIEW_MIN_LEVEL         = 0x82DB,
TEXTURE_VIEW_NUM_LAYERS        = 0x82DE,
TEXTURE_VIEW_NUM_LEVELS        = 0x82DC,
TEXTURE_WIDTH                  = 0x1000,
TEXTURE_WRAP_R                 = 0x8072,
TEXTURE_WRAP_S                 = 0x2802,
TEXTURE_WRAP_T                 = 0x2803,
TIMEOUT_EXPIRED                = 0x911B,
TIMESTAMP                      = 0x8E28,
TIME_ELAPSED                   = 0x88BF,
TOP_LEVEL_ARRAY_SIZE           = 0x930C,
TOP_LEVEL_ARRAY_STRIDE         = 0x930D,
TRANSFORM_FEEDBACK             = 0x8E22,
TRANSFORM_FEEDBACK_ACTIVE      = 0x8E24,
TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800,
TRANSFORM_FEEDBACK_BINDING     = 0x8E25,
TRANSFORM_FEEDBACK_BUFFER      = 0x8C8E,
TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24,
TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F,
TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B,
TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F,
TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23,
TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85,
TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84,
TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C,
TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC,
TRANSFORM_FEEDBACK_PAUSED      = 0x8E23,
TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88,
TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED,
TRANSFORM_FEEDBACK_VARYING     = 0x92F4,
TRANSFORM_FEEDBACK_VARYINGS    = 0x8C83,
TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76,
TRIANGLES                      = 0x0004,
TRIANGLES_ADJACENCY            = 0x000C,
TRIANGLE_FAN                   = 0x0006,
TRIANGLE_STRIP                 = 0x0005,
TRIANGLE_STRIP_ADJACENCY       = 0x000D,
TYPE                           = 0x92FA,
UNDEFINED_VERTEX               = 0x8260,
UNIFORM                        = 0x92E1,
UNIFORM_ARRAY_STRIDE           = 0x8A3C,
UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA,
UNIFORM_BARRIER_BIT            = 0x00000004,
UNIFORM_BLOCK                  = 0x92E2,
UNIFORM_BLOCK_ACTIVE_UNIFORMS  = 0x8A42,
UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43,
UNIFORM_BLOCK_BINDING          = 0x8A3F,
UNIFORM_BLOCK_DATA_SIZE        = 0x8A40,
UNIFORM_BLOCK_INDEX            = 0x8A3A,
UNIFORM_BLOCK_NAME_LENGTH      = 0x8A41,
UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC,
UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46,
UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45,
UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0,
UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1,
UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44,
UNIFORM_BUFFER                 = 0x8A11,
UNIFORM_BUFFER_BINDING         = 0x8A28,
UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34,
UNIFORM_BUFFER_SIZE            = 0x8A2A,
UNIFORM_BUFFER_START           = 0x8A29,
UNIFORM_IS_ROW_MAJOR           = 0x8A3E,
UNIFORM_MATRIX_STRIDE          = 0x8A3D,
UNIFORM_NAME_LENGTH            = 0x8A39,
UNIFORM_OFFSET                 = 0x8A3B,
UNIFORM_SIZE                   = 0x8A38,
UNIFORM_TYPE                   = 0x8A37,
UNKNOWN_CONTEXT_RESET          = 0x8255,
UNKNOWN_CONTEXT_RESET_ARB      = 0x8255,
UNPACK_ALIGNMENT               = 0x0CF5,
UNPACK_COMPRESSED_BLOCK_DEPTH  = 0x9129,
UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128,
UNPACK_COMPRESSED_BLOCK_SIZE   = 0x912A,
UNPACK_COMPRESSED_BLOCK_WIDTH  = 0x9127,
UNPACK_IMAGE_HEIGHT            = 0x806E,
UNPACK_LSB_FIRST               = 0x0CF1,
UNPACK_ROW_LENGTH              = 0x0CF2,
UNPACK_SKIP_IMAGES             = 0x806D,
UNPACK_SKIP_PIXELS             = 0x0CF4,
UNPACK_SKIP_ROWS               = 0x0CF3,
UNPACK_SWAP_BYTES              = 0x0CF0,
UNSIGNALED                     = 0x9118,
UNSIGNED_BYTE                  = 0x1401,
UNSIGNED_BYTE_2_3_3_REV        = 0x8362,
UNSIGNED_BYTE_3_3_2            = 0x8032,
UNSIGNED_INT                   = 0x1405,
UNSIGNED_INT64_ARB             = 0x140F,
UNSIGNED_INT_10F_11F_11F_REV   = 0x8C3B,
UNSIGNED_INT_10_10_10_2        = 0x8036,
UNSIGNED_INT_24_8              = 0x84FA,
UNSIGNED_INT_2_10_10_10_REV    = 0x8368,
UNSIGNED_INT_5_9_9_9_REV       = 0x8C3E,
UNSIGNED_INT_8_8_8_8           = 0x8035,
UNSIGNED_INT_8_8_8_8_REV       = 0x8367,
UNSIGNED_INT_ATOMIC_COUNTER    = 0x92DB,
UNSIGNED_INT_IMAGE_1D          = 0x9062,
UNSIGNED_INT_IMAGE_1D_ARRAY    = 0x9068,
UNSIGNED_INT_IMAGE_2D          = 0x9063,
UNSIGNED_INT_IMAGE_2D_ARRAY    = 0x9069,
UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B,
UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C,
UNSIGNED_INT_IMAGE_2D_RECT     = 0x9065,
UNSIGNED_INT_IMAGE_3D          = 0x9064,
UNSIGNED_INT_IMAGE_BUFFER      = 0x9067,
UNSIGNED_INT_IMAGE_CUBE        = 0x9066,
UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A,
UNSIGNED_INT_SAMPLER_1D        = 0x8DD1,
UNSIGNED_INT_SAMPLER_1D_ARRAY  = 0x8DD6,
UNSIGNED_INT_SAMPLER_2D        = 0x8DD2,
UNSIGNED_INT_SAMPLER_2D_ARRAY  = 0x8DD7,
UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A,
UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D,
UNSIGNED_INT_SAMPLER_2D_RECT   = 0x8DD5,
UNSIGNED_INT_SAMPLER_3D        = 0x8DD3,
UNSIGNED_INT_SAMPLER_BUFFER    = 0x8DD8,
UNSIGNED_INT_SAMPLER_CUBE      = 0x8DD4,
UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F,
UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F,
UNSIGNED_INT_VEC2              = 0x8DC6,
UNSIGNED_INT_VEC3              = 0x8DC7,
UNSIGNED_INT_VEC4              = 0x8DC8,
UNSIGNED_NORMALIZED            = 0x8C17,
UNSIGNED_SHORT                 = 0x1403,
UNSIGNED_SHORT_1_5_5_5_REV     = 0x8366,
UNSIGNED_SHORT_4_4_4_4         = 0x8033,
UNSIGNED_SHORT_4_4_4_4_REV     = 0x8365,
UNSIGNED_SHORT_5_5_5_1         = 0x8034,
UNSIGNED_SHORT_5_6_5           = 0x8363,
UNSIGNED_SHORT_5_6_5_REV       = 0x8364,
UPPER_LEFT                     = 0x8CA2,
VALIDATE_STATUS                = 0x8B83,
VENDOR                         = 0x1F00,
VERSION                        = 0x1F02,
VERTEX_ARRAY                   = 0x8074,
VERTEX_ARRAY_BINDING           = 0x85B5,
VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001,
VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,
VERTEX_ATTRIB_ARRAY_DIVISOR    = 0x88FE,
VERTEX_ATTRIB_ARRAY_ENABLED    = 0x8622,
VERTEX_ATTRIB_ARRAY_INTEGER    = 0x88FD,
VERTEX_ATTRIB_ARRAY_LONG       = 0x874E,
VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
VERTEX_ATTRIB_ARRAY_POINTER    = 0x8645,
VERTEX_ATTRIB_ARRAY_SIZE       = 0x8623,
VERTEX_ATTRIB_ARRAY_STRIDE     = 0x8624,
VERTEX_ATTRIB_ARRAY_TYPE       = 0x8625,
VERTEX_ATTRIB_BINDING          = 0x82D4,
VERTEX_ATTRIB_RELATIVE_OFFSET  = 0x82D5,
VERTEX_BINDING_BUFFER          = 0x8F4F,
VERTEX_BINDING_DIVISOR         = 0x82D6,
VERTEX_BINDING_OFFSET          = 0x82D7,
VERTEX_BINDING_STRIDE          = 0x82D8,
VERTEX_PROGRAM_POINT_SIZE      = 0x8642,
VERTEX_SHADER                  = 0x8B31,
VERTEX_SHADER_BIT              = 0x00000001,
VERTEX_SHADER_INVOCATIONS_ARB  = 0x82F0,
VERTEX_SUBROUTINE              = 0x92E8,
VERTEX_SUBROUTINE_UNIFORM      = 0x92EE,
VERTEX_TEXTURE                 = 0x829B,
VERTICES_SUBMITTED_ARB         = 0x82EE,
VIEWPORT                       = 0x0BA2,
VIEWPORT_BOUNDS_RANGE          = 0x825D,
VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F,
VIEWPORT_SUBPIXEL_BITS         = 0x825C,
VIEW_CLASS_128_BITS            = 0x82C4,
VIEW_CLASS_16_BITS             = 0x82CA,
VIEW_CLASS_24_BITS             = 0x82C9,
VIEW_CLASS_32_BITS             = 0x82C8,
VIEW_CLASS_48_BITS             = 0x82C7,
VIEW_CLASS_64_BITS             = 0x82C6,
VIEW_CLASS_8_BITS              = 0x82CB,
VIEW_CLASS_96_BITS             = 0x82C5,
VIEW_CLASS_BPTC_FLOAT          = 0x82D3,
VIEW_CLASS_BPTC_UNORM          = 0x82D2,
VIEW_CLASS_RGTC1_RED           = 0x82D0,
VIEW_CLASS_RGTC2_RG            = 0x82D1,
VIEW_CLASS_S3TC_DXT1_RGB       = 0x82CC,
VIEW_CLASS_S3TC_DXT1_RGBA      = 0x82CD,
VIEW_CLASS_S3TC_DXT3_RGBA      = 0x82CE,
VIEW_CLASS_S3TC_DXT5_RGBA      = 0x82CF,
VIEW_COMPATIBILITY_CLASS       = 0x82B6,
VIRTUAL_PAGE_SIZE_INDEX_ARB    = 0x91A7,
VIRTUAL_PAGE_SIZE_X_ARB        = 0x9195,
VIRTUAL_PAGE_SIZE_Y_ARB        = 0x9196,
VIRTUAL_PAGE_SIZE_Z_ARB        = 0x9197,
WAIT_FAILED                    = 0x911D,
WRITE_ONLY                     = 0x88B9,
XOR                            = 0x1506,
ZERO_TO_ONE                    = 0x935F,

};
/* OpenGL functions */
GLboolean isBuffer (GLuint buffer) asm("glIsBuffer");
GLboolean isEnabled (GLenum cap) asm("glIsEnabled");
GLboolean isEnabledi (GLenum target, GLuint index) asm("glIsEnabledi");
GLboolean isFramebuffer (GLuint framebuffer) asm("glIsFramebuffer");
GLboolean isImageHandleResidentARB (GLuint64 handle) asm("glIsImageHandleResidentARB");
GLboolean isNamedStringARB (GLint namelen, const GLchar *name) asm("glIsNamedStringARB");
GLboolean isProgram (GLuint program) asm("glIsProgram");
GLboolean isProgramPipeline (GLuint pipeline) asm("glIsProgramPipeline");
GLboolean isQuery (GLuint id) asm("glIsQuery");
GLboolean isRenderbuffer (GLuint renderbuffer) asm("glIsRenderbuffer");
GLboolean isSampler (GLuint sampler) asm("glIsSampler");
GLboolean isShader (GLuint shader) asm("glIsShader");
GLboolean isSync (GLsync sync) asm("glIsSync");
GLboolean isTexture (GLuint texture) asm("glIsTexture");
GLboolean isTextureHandleResidentARB (GLuint64 handle) asm("glIsTextureHandleResidentARB");
GLboolean isTransformFeedback (GLuint id) asm("glIsTransformFeedback");
GLboolean isVertexArray (GLuint array) asm("glIsVertexArray");
GLboolean unmapBuffer (GLenum target) asm("glUnmapBuffer");
GLboolean unmapNamedBuffer (GLuint buffer) asm("glUnmapNamedBuffer");
GLenum checkFramebufferStatus (GLenum target) asm("glCheckFramebufferStatus");
GLenum checkNamedFramebufferStatus (GLuint framebuffer, GLenum target) asm("glCheckNamedFramebufferStatus");
GLenum clientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout) asm("glClientWaitSync");
GLenum getError (void) asm("glGetError");
GLenum getGraphicsResetStatus (void) asm("glGetGraphicsResetStatus");
GLenum getGraphicsResetStatusARB (void) asm("glGetGraphicsResetStatusARB");
GLint getAttribLocation (GLuint program, const GLchar *name) asm("glGetAttribLocation");
GLint getFragDataIndex (GLuint program, const GLchar *name) asm("glGetFragDataIndex");
GLint getFragDataLocation (GLuint program, const GLchar *name) asm("glGetFragDataLocation");
GLint getProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name) asm("glGetProgramResourceLocation");
GLint getProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name) asm("glGetProgramResourceLocationIndex");
GLint getSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name) asm("glGetSubroutineUniformLocation");
GLint getUniformLocation (GLuint program, const GLchar *name) asm("glGetUniformLocation");
GLsync createSyncFromCLeventARB (struct _cl_context *context, struct _cl_event *event, GLbitfield flags) asm("glCreateSyncFromCLeventARB");
GLsync fenceSync (GLenum condition, GLbitfield flags) asm("glFenceSync");
GLuint createProgram (void) asm("glCreateProgram");
GLuint createShader (GLenum type) asm("glCreateShader");
GLuint createShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings) asm("glCreateShaderProgramv");
GLuint getDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) asm("glGetDebugMessageLog");
GLuint getDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) asm("glGetDebugMessageLogARB");
GLuint getProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name) asm("glGetProgramResourceIndex");
GLuint getSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name) asm("glGetSubroutineIndex");
GLuint getUniformBlockIndex (GLuint program, const GLchar *uniformBlockName) asm("glGetUniformBlockIndex");
GLuint64 getImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) asm("glGetImageHandleARB");
GLuint64 getTextureHandleARB (GLuint texture) asm("glGetTextureHandleARB");
GLuint64 getTextureSamplerHandleARB (GLuint texture, GLuint sampler) asm("glGetTextureSamplerHandleARB");
void activeShaderProgram (GLuint pipeline, GLuint program) asm("glActiveShaderProgram");
void activeTexture (GLenum texture) asm("glActiveTexture");
void attachShader (GLuint program, GLuint shader) asm("glAttachShader");
void beginConditionalRender (GLuint id, GLenum mode) asm("glBeginConditionalRender");
void beginQuery (GLenum target, GLuint id) asm("glBeginQuery");
void beginQueryIndexed (GLenum target, GLuint index, GLuint id) asm("glBeginQueryIndexed");
void beginTransformFeedback (GLenum primitiveMode) asm("glBeginTransformFeedback");
void bindAttribLocation (GLuint program, GLuint index, const GLchar *name) asm("glBindAttribLocation");
void bindBuffer (GLenum target, GLuint buffer) asm("glBindBuffer");
void bindBufferBase (GLenum target, GLuint index, GLuint buffer) asm("glBindBufferBase");
void bindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) asm("glBindBufferRange");
void bindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers) asm("glBindBuffersBase");
void bindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes) asm("glBindBuffersRange");
void bindFragDataLocation (GLuint program, GLuint color, const GLchar *name) asm("glBindFragDataLocation");
void bindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) asm("glBindFragDataLocationIndexed");
void bindFramebuffer (GLenum target, GLuint framebuffer) asm("glBindFramebuffer");
void bindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) asm("glBindImageTexture");
void bindImageTextures (GLuint first, GLsizei count, const GLuint *textures) asm("glBindImageTextures");
void bindProgramPipeline (GLuint pipeline) asm("glBindProgramPipeline");
void bindRenderbuffer (GLenum target, GLuint renderbuffer) asm("glBindRenderbuffer");
void bindSampler (GLuint unit, GLuint sampler) asm("glBindSampler");
void bindSamplers (GLuint first, GLsizei count, const GLuint *samplers) asm("glBindSamplers");
void bindTexture (GLenum target, GLuint texture) asm("glBindTexture");
void bindTextureUnit (GLuint unit, GLuint texture) asm("glBindTextureUnit");
void bindTextures (GLuint first, GLsizei count, const GLuint *textures) asm("glBindTextures");
void bindTransformFeedback (GLenum target, GLuint id) asm("glBindTransformFeedback");
void bindVertexArray (GLuint array) asm("glBindVertexArray");
void bindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) asm("glBindVertexBuffer");
void bindVertexBuffers (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) asm("glBindVertexBuffers");
void blendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) asm("glBlendColor");
void blendEquation (GLenum mode) asm("glBlendEquation");
void blendEquationSeparate (GLenum modeRGB, GLenum modeAlpha) asm("glBlendEquationSeparate");
void blendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha) asm("glBlendEquationSeparatei");
void blendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha) asm("glBlendEquationSeparateiARB");
void blendEquationi (GLuint buf, GLenum mode) asm("glBlendEquationi");
void blendEquationiARB (GLuint buf, GLenum mode) asm("glBlendEquationiARB");
void blendFunc (GLenum sfactor, GLenum dfactor) asm("glBlendFunc");
void blendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) asm("glBlendFuncSeparate");
void blendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) asm("glBlendFuncSeparatei");
void blendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) asm("glBlendFuncSeparateiARB");
void blendFunci (GLuint buf, GLenum src, GLenum dst) asm("glBlendFunci");
void blendFunciARB (GLuint buf, GLenum src, GLenum dst) asm("glBlendFunciARB");
void blitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) asm("glBlitFramebuffer");
void blitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) asm("glBlitNamedFramebuffer");
void bufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage) asm("glBufferData");
void bufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) asm("glBufferPageCommitmentARB");
void bufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags) asm("glBufferStorage");
void bufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data) asm("glBufferSubData");
void clampColor (GLenum target, GLenum clamp) asm("glClampColor");
void clear (GLbitfield mask) asm("glClear");
void clearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data) asm("glClearBufferData");
void clearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) asm("glClearBufferSubData");
void clearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) asm("glClearBufferfi");
void clearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value) asm("glClearBufferfv");
void clearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value) asm("glClearBufferiv");
void clearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value) asm("glClearBufferuiv");
void clearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) asm("glClearColor");
void clearDepth (GLdouble depth) asm("glClearDepth");
void clearDepthf (GLfloat d) asm("glClearDepthf");
void clearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data) asm("glClearNamedBufferData");
void clearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data) asm("glClearNamedBufferSubData");
void clearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil) asm("glClearNamedFramebufferfi");
void clearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value) asm("glClearNamedFramebufferfv");
void clearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value) asm("glClearNamedFramebufferiv");
void clearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value) asm("glClearNamedFramebufferuiv");
void clearStencil (GLint s) asm("glClearStencil");
void clearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data) asm("glClearTexImage");
void clearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data) asm("glClearTexSubImage");
void clipControl (GLenum origin, GLenum depth) asm("glClipControl");
void colorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) asm("glColorMask");
void colorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) asm("glColorMaski");
void compileShader (GLuint shader) asm("glCompileShader");
void compileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length) asm("glCompileShaderIncludeARB");
void compressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) asm("glCompressedTexImage1D");
void compressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) asm("glCompressedTexImage2D");
void compressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) asm("glCompressedTexImage3D");
void compressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) asm("glCompressedTexSubImage1D");
void compressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) asm("glCompressedTexSubImage2D");
void compressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) asm("glCompressedTexSubImage3D");
void compressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) asm("glCompressedTextureSubImage1D");
void compressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) asm("glCompressedTextureSubImage2D");
void compressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) asm("glCompressedTextureSubImage3D");
void copyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) asm("glCopyBufferSubData");
void copyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) asm("glCopyImageSubData");
void copyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) asm("glCopyNamedBufferSubData");
void copyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) asm("glCopyTexImage1D");
void copyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) asm("glCopyTexImage2D");
void copyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) asm("glCopyTexSubImage1D");
void copyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) asm("glCopyTexSubImage2D");
void copyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) asm("glCopyTexSubImage3D");
void copyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) asm("glCopyTextureSubImage1D");
void copyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) asm("glCopyTextureSubImage2D");
void copyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) asm("glCopyTextureSubImage3D");
void createBuffers (GLsizei n, GLuint *buffers) asm("glCreateBuffers");
void createFramebuffers (GLsizei n, GLuint *framebuffers) asm("glCreateFramebuffers");
void createProgramPipelines (GLsizei n, GLuint *pipelines) asm("glCreateProgramPipelines");
void createQueries (GLenum target, GLsizei n, GLuint *ids) asm("glCreateQueries");
void createRenderbuffers (GLsizei n, GLuint *renderbuffers) asm("glCreateRenderbuffers");
void createSamplers (GLsizei n, GLuint *samplers) asm("glCreateSamplers");
void createTextures (GLenum target, GLsizei n, GLuint *textures) asm("glCreateTextures");
void createTransformFeedbacks (GLsizei n, GLuint *ids) asm("glCreateTransformFeedbacks");
void createVertexArrays (GLsizei n, GLuint *arrays) asm("glCreateVertexArrays");
void cullFace (GLenum mode) asm("glCullFace");
void debugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) asm("glDebugMessageControl");
void debugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) asm("glDebugMessageControlARB");
void debugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) asm("glDebugMessageInsert");
void debugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) asm("glDebugMessageInsertARB");
void deleteBuffers (GLsizei n, const GLuint *buffers) asm("glDeleteBuffers");
void deleteFramebuffers (GLsizei n, const GLuint *framebuffers) asm("glDeleteFramebuffers");
void deleteNamedStringARB (GLint namelen, const GLchar *name) asm("glDeleteNamedStringARB");
void deleteProgram (GLuint program) asm("glDeleteProgram");
void deleteProgramPipelines (GLsizei n, const GLuint *pipelines) asm("glDeleteProgramPipelines");
void deleteQueries (GLsizei n, const GLuint *ids) asm("glDeleteQueries");
void deleteRenderbuffers (GLsizei n, const GLuint *renderbuffers) asm("glDeleteRenderbuffers");
void deleteSamplers (GLsizei count, const GLuint *samplers) asm("glDeleteSamplers");
void deleteShader (GLuint shader) asm("glDeleteShader");
void deleteSync (GLsync sync) asm("glDeleteSync");
void deleteTextures (GLsizei n, const GLuint *textures) asm("glDeleteTextures");
void deleteTransformFeedbacks (GLsizei n, const GLuint *ids) asm("glDeleteTransformFeedbacks");
void deleteVertexArrays (GLsizei n, const GLuint *arrays) asm("glDeleteVertexArrays");
void depthFunc (GLenum func) asm("glDepthFunc");
void depthMask (GLboolean flag) asm("glDepthMask");
void depthRange (GLdouble near, GLdouble far) asm("glDepthRange");
void depthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v) asm("glDepthRangeArrayv");
void depthRangeIndexed (GLuint index, GLdouble n, GLdouble f) asm("glDepthRangeIndexed");
void depthRangef (GLfloat n, GLfloat f) asm("glDepthRangef");
void detachShader (GLuint program, GLuint shader) asm("glDetachShader");
void disable (GLenum cap) asm("glDisable");
void disableVertexArrayAttrib (GLuint vaobj, GLuint index) asm("glDisableVertexArrayAttrib");
void disableVertexAttribArray (GLuint index) asm("glDisableVertexAttribArray");
void disablei (GLenum target, GLuint index) asm("glDisablei");
void dispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) asm("glDispatchCompute");
void dispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) asm("glDispatchComputeGroupSizeARB");
void dispatchComputeIndirect (GLintptr indirect) asm("glDispatchComputeIndirect");
void drawArrays (GLenum mode, GLint first, GLsizei count) asm("glDrawArrays");
void drawArraysIndirect (GLenum mode, const void *indirect) asm("glDrawArraysIndirect");
void drawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount) asm("glDrawArraysInstanced");
void drawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) asm("glDrawArraysInstancedBaseInstance");
void drawBuffer (GLenum buf) asm("glDrawBuffer");
void drawBuffers (GLsizei n, const GLenum *bufs) asm("glDrawBuffers");
void drawElements (GLenum mode, GLsizei count, GLenum type, const void *indices) asm("glDrawElements");
void drawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex) asm("glDrawElementsBaseVertex");
void drawElementsIndirect (GLenum mode, GLenum type, const void *indirect) asm("glDrawElementsIndirect");
void drawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount) asm("glDrawElementsInstanced");
void drawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance) asm("glDrawElementsInstancedBaseInstance");
void drawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex) asm("glDrawElementsInstancedBaseVertex");
void drawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) asm("glDrawElementsInstancedBaseVertexBaseInstance");
void drawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices) asm("glDrawRangeElements");
void drawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex) asm("glDrawRangeElementsBaseVertex");
void drawTransformFeedback (GLenum mode, GLuint id) asm("glDrawTransformFeedback");
void drawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount) asm("glDrawTransformFeedbackInstanced");
void drawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream) asm("glDrawTransformFeedbackStream");
void drawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) asm("glDrawTransformFeedbackStreamInstanced");
void enable (GLenum cap) asm("glEnable");
void enableVertexArrayAttrib (GLuint vaobj, GLuint index) asm("glEnableVertexArrayAttrib");
void enableVertexAttribArray (GLuint index) asm("glEnableVertexAttribArray");
void enablei (GLenum target, GLuint index) asm("glEnablei");
void endConditionalRender (void) asm("glEndConditionalRender");
void endQuery (GLenum target) asm("glEndQuery");
void endQueryIndexed (GLenum target, GLuint index) asm("glEndQueryIndexed");
void endTransformFeedback (void) asm("glEndTransformFeedback");
void finish (void) asm("glFinish");
void flush (void) asm("glFlush");
void flushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length) asm("glFlushMappedBufferRange");
void flushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length) asm("glFlushMappedNamedBufferRange");
void framebufferParameteri (GLenum target, GLenum pname, GLint param) asm("glFramebufferParameteri");
void framebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) asm("glFramebufferRenderbuffer");
void framebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level) asm("glFramebufferTexture");
void framebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) asm("glFramebufferTexture1D");
void framebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) asm("glFramebufferTexture2D");
void framebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) asm("glFramebufferTexture3D");
void framebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) asm("glFramebufferTextureLayer");
void frontFace (GLenum mode) asm("glFrontFace");
void genBuffers (GLsizei n, GLuint *buffers) asm("glGenBuffers");
void genFramebuffers (GLsizei n, GLuint *framebuffers) asm("glGenFramebuffers");
void genProgramPipelines (GLsizei n, GLuint *pipelines) asm("glGenProgramPipelines");
void genQueries (GLsizei n, GLuint *ids) asm("glGenQueries");
void genRenderbuffers (GLsizei n, GLuint *renderbuffers) asm("glGenRenderbuffers");
void genSamplers (GLsizei count, GLuint *samplers) asm("glGenSamplers");
void genTextures (GLsizei n, GLuint *textures) asm("glGenTextures");
void genTransformFeedbacks (GLsizei n, GLuint *ids) asm("glGenTransformFeedbacks");
void genVertexArrays (GLsizei n, GLuint *arrays) asm("glGenVertexArrays");
void generateMipmap (GLenum target) asm("glGenerateMipmap");
void generateTextureMipmap (GLuint texture) asm("glGenerateTextureMipmap");
void getActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) asm("glGetActiveAtomicCounterBufferiv");
void getActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) asm("glGetActiveAttrib");
void getActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) asm("glGetActiveSubroutineName");
void getActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name) asm("glGetActiveSubroutineUniformName");
void getActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values) asm("glGetActiveSubroutineUniformiv");
void getActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) asm("glGetActiveUniform");
void getActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) asm("glGetActiveUniformBlockName");
void getActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) asm("glGetActiveUniformBlockiv");
void getActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) asm("glGetActiveUniformName");
void getActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) asm("glGetActiveUniformsiv");
void getAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) asm("glGetAttachedShaders");
void getBooleani_v (GLenum target, GLuint index, GLboolean *data) asm("glGetBooleani_v");
void getBooleanv (GLenum pname, GLboolean *data) asm("glGetBooleanv");
void getBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params) asm("glGetBufferParameteri64v");
void getBufferParameteriv (GLenum target, GLenum pname, GLint *params) asm("glGetBufferParameteriv");
void getBufferPointerv (GLenum target, GLenum pname, void **params) asm("glGetBufferPointerv");
void getBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data) asm("glGetBufferSubData");
void getCompressedTexImage (GLenum target, GLint level, void *img) asm("glGetCompressedTexImage");
void getCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void *pixels) asm("glGetCompressedTextureImage");
void getCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels) asm("glGetCompressedTextureSubImage");
void getDoublei_v (GLenum target, GLuint index, GLdouble *data) asm("glGetDoublei_v");
void getDoublev (GLenum pname, GLdouble *data) asm("glGetDoublev");
void getFloati_v (GLenum target, GLuint index, GLfloat *data) asm("glGetFloati_v");
void getFloatv (GLenum pname, GLfloat *data) asm("glGetFloatv");
void getFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params) asm("glGetFramebufferAttachmentParameteriv");
void getFramebufferParameteriv (GLenum target, GLenum pname, GLint *params) asm("glGetFramebufferParameteriv");
void getInteger64i_v (GLenum target, GLuint index, GLint64 *data) asm("glGetInteger64i_v");
void getInteger64v (GLenum pname, GLint64 *data) asm("glGetInteger64v");
void getIntegeri_v (GLenum target, GLuint index, GLint *data) asm("glGetIntegeri_v");
void getIntegerv (GLenum pname, GLint *data) asm("glGetIntegerv");
void getInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) asm("glGetInternalformati64v");
void getInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) asm("glGetInternalformativ");
void getMultisamplefv (GLenum pname, GLuint index, GLfloat *val) asm("glGetMultisamplefv");
void getNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 *params) asm("glGetNamedBufferParameteri64v");
void getNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint *params) asm("glGetNamedBufferParameteriv");
void getNamedBufferPointerv (GLuint buffer, GLenum pname, void **params) asm("glGetNamedBufferPointerv");
void getNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data) asm("glGetNamedBufferSubData");
void getNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) asm("glGetNamedFramebufferAttachmentParameteriv");
void getNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint *param) asm("glGetNamedFramebufferParameteriv");
void getNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint *params) asm("glGetNamedRenderbufferParameteriv");
void getNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) asm("glGetNamedStringARB");
void getNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params) asm("glGetNamedStringivARB");
void getObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) asm("glGetObjectLabel");
void getObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) asm("glGetObjectPtrLabel");
void getPointerv (GLenum pname, void **params) asm("glGetPointerv");
void getProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary) asm("glGetProgramBinary");
void getProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) asm("glGetProgramInfoLog");
void getProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params) asm("glGetProgramInterfaceiv");
void getProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) asm("glGetProgramPipelineInfoLog");
void getProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params) asm("glGetProgramPipelineiv");
void getProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) asm("glGetProgramResourceName");
void getProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) asm("glGetProgramResourceiv");
void getProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values) asm("glGetProgramStageiv");
void getProgramiv (GLuint program, GLenum pname, GLint *params) asm("glGetProgramiv");
void getQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) asm("glGetQueryBufferObjecti64v");
void getQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) asm("glGetQueryBufferObjectiv");
void getQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) asm("glGetQueryBufferObjectui64v");
void getQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset) asm("glGetQueryBufferObjectuiv");
void getQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params) asm("glGetQueryIndexediv");
void getQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params) asm("glGetQueryObjecti64v");
void getQueryObjectiv (GLuint id, GLenum pname, GLint *params) asm("glGetQueryObjectiv");
void getQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params) asm("glGetQueryObjectui64v");
void getQueryObjectuiv (GLuint id, GLenum pname, GLuint *params) asm("glGetQueryObjectuiv");
void getQueryiv (GLenum target, GLenum pname, GLint *params) asm("glGetQueryiv");
void getRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params) asm("glGetRenderbufferParameteriv");
void getSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params) asm("glGetSamplerParameterIiv");
void getSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params) asm("glGetSamplerParameterIuiv");
void getSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params) asm("glGetSamplerParameterfv");
void getSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params) asm("glGetSamplerParameteriv");
void getShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) asm("glGetShaderInfoLog");
void getShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) asm("glGetShaderPrecisionFormat");
void getShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) asm("glGetShaderSource");
void getShaderiv (GLuint shader, GLenum pname, GLint *params) asm("glGetShaderiv");
void getSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) asm("glGetSynciv");
void getTexImage (GLenum target, GLint level, GLenum format, GLenum type, void *pixels) asm("glGetTexImage");
void getTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params) asm("glGetTexLevelParameterfv");
void getTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params) asm("glGetTexLevelParameteriv");
void getTexParameterIiv (GLenum target, GLenum pname, GLint *params) asm("glGetTexParameterIiv");
void getTexParameterIuiv (GLenum target, GLenum pname, GLuint *params) asm("glGetTexParameterIuiv");
void getTexParameterfv (GLenum target, GLenum pname, GLfloat *params) asm("glGetTexParameterfv");
void getTexParameteriv (GLenum target, GLenum pname, GLint *params) asm("glGetTexParameteriv");
void getTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) asm("glGetTextureImage");
void getTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat *params) asm("glGetTextureLevelParameterfv");
void getTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint *params) asm("glGetTextureLevelParameteriv");
void getTextureParameterIiv (GLuint texture, GLenum pname, GLint *params) asm("glGetTextureParameterIiv");
void getTextureParameterIuiv (GLuint texture, GLenum pname, GLuint *params) asm("glGetTextureParameterIuiv");
void getTextureParameterfv (GLuint texture, GLenum pname, GLfloat *params) asm("glGetTextureParameterfv");
void getTextureParameteriv (GLuint texture, GLenum pname, GLint *params) asm("glGetTextureParameteriv");
void getTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels) asm("glGetTextureSubImage");
void getTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) asm("glGetTransformFeedbackVarying");
void getTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 *param) asm("glGetTransformFeedbacki64_v");
void getTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint *param) asm("glGetTransformFeedbacki_v");
void getTransformFeedbackiv (GLuint xfb, GLenum pname, GLint *param) asm("glGetTransformFeedbackiv");
void getUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices) asm("glGetUniformIndices");
void getUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params) asm("glGetUniformSubroutineuiv");
void getUniformdv (GLuint program, GLint location, GLdouble *params) asm("glGetUniformdv");
void getUniformfv (GLuint program, GLint location, GLfloat *params) asm("glGetUniformfv");
void getUniformiv (GLuint program, GLint location, GLint *params) asm("glGetUniformiv");
void getUniformuiv (GLuint program, GLint location, GLuint *params) asm("glGetUniformuiv");
void getVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param) asm("glGetVertexArrayIndexed64iv");
void getVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint *param) asm("glGetVertexArrayIndexediv");
void getVertexArrayiv (GLuint vaobj, GLenum pname, GLint *param) asm("glGetVertexArrayiv");
void getVertexAttribIiv (GLuint index, GLenum pname, GLint *params) asm("glGetVertexAttribIiv");
void getVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params) asm("glGetVertexAttribIuiv");
void getVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params) asm("glGetVertexAttribLdv");
void getVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT *params) asm("glGetVertexAttribLui64vARB");
void getVertexAttribPointerv (GLuint index, GLenum pname, void **pointer) asm("glGetVertexAttribPointerv");
void getVertexAttribdv (GLuint index, GLenum pname, GLdouble *params) asm("glGetVertexAttribdv");
void getVertexAttribfv (GLuint index, GLenum pname, GLfloat *params) asm("glGetVertexAttribfv");
void getVertexAttribiv (GLuint index, GLenum pname, GLint *params) asm("glGetVertexAttribiv");
void getnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void *pixels) asm("glGetnCompressedTexImage");
void getnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void *img) asm("glGetnCompressedTexImageARB");
void getnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels) asm("glGetnTexImage");
void getnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img) asm("glGetnTexImageARB");
void getnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) asm("glGetnUniformdv");
void getnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params) asm("glGetnUniformdvARB");
void getnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) asm("glGetnUniformfv");
void getnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params) asm("glGetnUniformfvARB");
void getnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint *params) asm("glGetnUniformiv");
void getnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params) asm("glGetnUniformivARB");
void getnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint *params) asm("glGetnUniformuiv");
void getnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params) asm("glGetnUniformuivARB");
void hint (GLenum target, GLenum mode) asm("glHint");
void invalidateBufferData (GLuint buffer) asm("glInvalidateBufferData");
void invalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length) asm("glInvalidateBufferSubData");
void invalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments) asm("glInvalidateFramebuffer");
void invalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments) asm("glInvalidateNamedFramebufferData");
void invalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) asm("glInvalidateNamedFramebufferSubData");
void invalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) asm("glInvalidateSubFramebuffer");
void invalidateTexImage (GLuint texture, GLint level) asm("glInvalidateTexImage");
void invalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) asm("glInvalidateTexSubImage");
void lineWidth (GLfloat width) asm("glLineWidth");
void linkProgram (GLuint program) asm("glLinkProgram");
void logicOp (GLenum opcode) asm("glLogicOp");
void makeImageHandleNonResidentARB (GLuint64 handle) asm("glMakeImageHandleNonResidentARB");
void makeImageHandleResidentARB (GLuint64 handle, GLenum access) asm("glMakeImageHandleResidentARB");
void makeTextureHandleNonResidentARB (GLuint64 handle) asm("glMakeTextureHandleNonResidentARB");
void makeTextureHandleResidentARB (GLuint64 handle) asm("glMakeTextureHandleResidentARB");
void memoryBarrier (GLbitfield barriers) asm("glMemoryBarrier");
void memoryBarrierByRegion (GLbitfield barriers) asm("glMemoryBarrierByRegion");
void minSampleShading (GLfloat value) asm("glMinSampleShading");
void minSampleShadingARB (GLfloat value) asm("glMinSampleShadingARB");
void multiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) asm("glMultiDrawArrays");
void multiDrawArraysIndirect (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride) asm("glMultiDrawArraysIndirect");
void multiDrawArraysIndirectCountARB (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) asm("glMultiDrawArraysIndirectCountARB");
void multiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount) asm("glMultiDrawElements");
void multiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex) asm("glMultiDrawElementsBaseVertex");
void multiDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride) asm("glMultiDrawElementsIndirect");
void multiDrawElementsIndirectCountARB (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) asm("glMultiDrawElementsIndirectCountARB");
void namedBufferData (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage) asm("glNamedBufferData");
void namedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) asm("glNamedBufferPageCommitmentARB");
void namedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) asm("glNamedBufferPageCommitmentEXT");
void namedBufferStorage (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags) asm("glNamedBufferStorage");
void namedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data) asm("glNamedBufferSubData");
void namedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf) asm("glNamedFramebufferDrawBuffer");
void namedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum *bufs) asm("glNamedFramebufferDrawBuffers");
void namedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param) asm("glNamedFramebufferParameteri");
void namedFramebufferReadBuffer (GLuint framebuffer, GLenum src) asm("glNamedFramebufferReadBuffer");
void namedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) asm("glNamedFramebufferRenderbuffer");
void namedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) asm("glNamedFramebufferTexture");
void namedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) asm("glNamedFramebufferTextureLayer");
void namedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) asm("glNamedRenderbufferStorage");
void namedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) asm("glNamedRenderbufferStorageMultisample");
void namedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) asm("glNamedStringARB");
void objectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label) asm("glObjectLabel");
void objectPtrLabel (const void *ptr, GLsizei length, const GLchar *label) asm("glObjectPtrLabel");
void patchParameterfv (GLenum pname, const GLfloat *values) asm("glPatchParameterfv");
void patchParameteri (GLenum pname, GLint value) asm("glPatchParameteri");
void pauseTransformFeedback (void) asm("glPauseTransformFeedback");
void pixelStoref (GLenum pname, GLfloat param) asm("glPixelStoref");
void pixelStorei (GLenum pname, GLint param) asm("glPixelStorei");
void pointParameterf (GLenum pname, GLfloat param) asm("glPointParameterf");
void pointParameterfv (GLenum pname, const GLfloat *params) asm("glPointParameterfv");
void pointParameteri (GLenum pname, GLint param) asm("glPointParameteri");
void pointParameteriv (GLenum pname, const GLint *params) asm("glPointParameteriv");
void pointSize (GLfloat size) asm("glPointSize");
void polygonMode (GLenum face, GLenum mode) asm("glPolygonMode");
void polygonOffset (GLfloat factor, GLfloat units) asm("glPolygonOffset");
void popDebugGroup (void) asm("glPopDebugGroup");
void primitiveRestartIndex (GLuint index) asm("glPrimitiveRestartIndex");
void programBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length) asm("glProgramBinary");
void programParameteri (GLuint program, GLenum pname, GLint value) asm("glProgramParameteri");
void programUniform1d (GLuint program, GLint location, GLdouble v0) asm("glProgramUniform1d");
void programUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value) asm("glProgramUniform1dv");
void programUniform1f (GLuint program, GLint location, GLfloat v0) asm("glProgramUniform1f");
void programUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value) asm("glProgramUniform1fv");
void programUniform1i (GLuint program, GLint location, GLint v0) asm("glProgramUniform1i");
void programUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value) asm("glProgramUniform1iv");
void programUniform1ui (GLuint program, GLint location, GLuint v0) asm("glProgramUniform1ui");
void programUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value) asm("glProgramUniform1uiv");
void programUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1) asm("glProgramUniform2d");
void programUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value) asm("glProgramUniform2dv");
void programUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1) asm("glProgramUniform2f");
void programUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value) asm("glProgramUniform2fv");
void programUniform2i (GLuint program, GLint location, GLint v0, GLint v1) asm("glProgramUniform2i");
void programUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value) asm("glProgramUniform2iv");
void programUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1) asm("glProgramUniform2ui");
void programUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value) asm("glProgramUniform2uiv");
void programUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) asm("glProgramUniform3d");
void programUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value) asm("glProgramUniform3dv");
void programUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) asm("glProgramUniform3f");
void programUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value) asm("glProgramUniform3fv");
void programUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2) asm("glProgramUniform3i");
void programUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value) asm("glProgramUniform3iv");
void programUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) asm("glProgramUniform3ui");
void programUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value) asm("glProgramUniform3uiv");
void programUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) asm("glProgramUniform4d");
void programUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value) asm("glProgramUniform4dv");
void programUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) asm("glProgramUniform4f");
void programUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value) asm("glProgramUniform4fv");
void programUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) asm("glProgramUniform4i");
void programUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value) asm("glProgramUniform4iv");
void programUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) asm("glProgramUniform4ui");
void programUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value) asm("glProgramUniform4uiv");
void programUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value) asm("glProgramUniformHandleui64ARB");
void programUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *values) asm("glProgramUniformHandleui64vARB");
void programUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix2dv");
void programUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix2fv");
void programUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix2x3dv");
void programUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix2x3fv");
void programUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix2x4dv");
void programUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix2x4fv");
void programUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix3dv");
void programUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix3fv");
void programUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix3x2dv");
void programUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix3x2fv");
void programUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix3x4dv");
void programUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix3x4fv");
void programUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix4dv");
void programUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix4fv");
void programUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix4x2dv");
void programUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix4x2fv");
void programUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glProgramUniformMatrix4x3dv");
void programUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glProgramUniformMatrix4x3fv");
void provokingVertex (GLenum mode) asm("glProvokingVertex");
void pushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message) asm("glPushDebugGroup");
void queryCounter (GLuint id, GLenum target) asm("glQueryCounter");
void readBuffer (GLenum src) asm("glReadBuffer");
void readPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels) asm("glReadPixels");
void readnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) asm("glReadnPixels");
void readnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data) asm("glReadnPixelsARB");
void releaseShaderCompiler (void) asm("glReleaseShaderCompiler");
void renderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) asm("glRenderbufferStorage");
void renderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) asm("glRenderbufferStorageMultisample");
void resumeTransformFeedback (void) asm("glResumeTransformFeedback");
void sampleCoverage (GLfloat value, GLboolean invert) asm("glSampleCoverage");
void sampleMaski (GLuint maskNumber, GLbitfield mask) asm("glSampleMaski");
void samplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param) asm("glSamplerParameterIiv");
void samplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param) asm("glSamplerParameterIuiv");
void samplerParameterf (GLuint sampler, GLenum pname, GLfloat param) asm("glSamplerParameterf");
void samplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param) asm("glSamplerParameterfv");
void samplerParameteri (GLuint sampler, GLenum pname, GLint param) asm("glSamplerParameteri");
void samplerParameteriv (GLuint sampler, GLenum pname, const GLint *param) asm("glSamplerParameteriv");
void scissor (GLint x, GLint y, GLsizei width, GLsizei height) asm("glScissor");
void scissorArrayv (GLuint first, GLsizei count, const GLint *v) asm("glScissorArrayv");
void scissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) asm("glScissorIndexed");
void scissorIndexedv (GLuint index, const GLint *v) asm("glScissorIndexedv");
void shaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length) asm("glShaderBinary");
void shaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length) asm("glShaderSource");
void shaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) asm("glShaderStorageBlockBinding");
void stencilFunc (GLenum func, GLint ref, GLuint mask) asm("glStencilFunc");
void stencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask) asm("glStencilFuncSeparate");
void stencilMask (GLuint mask) asm("glStencilMask");
void stencilMaskSeparate (GLenum face, GLuint mask) asm("glStencilMaskSeparate");
void stencilOp (GLenum fail, GLenum zfail, GLenum zpass) asm("glStencilOp");
void stencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) asm("glStencilOpSeparate");
void texBuffer (GLenum target, GLenum internalformat, GLuint buffer) asm("glTexBuffer");
void texBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) asm("glTexBufferRange");
void texImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels) asm("glTexImage1D");
void texImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels) asm("glTexImage2D");
void texImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) asm("glTexImage2DMultisample");
void texImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels) asm("glTexImage3D");
void texImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) asm("glTexImage3DMultisample");
void texPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) asm("glTexPageCommitmentARB");
void texParameterIiv (GLenum target, GLenum pname, const GLint *params) asm("glTexParameterIiv");
void texParameterIuiv (GLenum target, GLenum pname, const GLuint *params) asm("glTexParameterIuiv");
void texParameterf (GLenum target, GLenum pname, GLfloat param) asm("glTexParameterf");
void texParameterfv (GLenum target, GLenum pname, const GLfloat *params) asm("glTexParameterfv");
void texParameteri (GLenum target, GLenum pname, GLint param) asm("glTexParameteri");
void texParameteriv (GLenum target, GLenum pname, const GLint *params) asm("glTexParameteriv");
void texStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) asm("glTexStorage1D");
void texStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) asm("glTexStorage2D");
void texStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) asm("glTexStorage2DMultisample");
void texStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) asm("glTexStorage3D");
void texStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) asm("glTexStorage3DMultisample");
void texSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) asm("glTexSubImage1D");
void texSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) asm("glTexSubImage2D");
void texSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) asm("glTexSubImage3D");
void textureBarrier (void) asm("glTextureBarrier");
void textureBuffer (GLuint texture, GLenum internalformat, GLuint buffer) asm("glTextureBuffer");
void textureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) asm("glTextureBufferRange");
void textureParameterIiv (GLuint texture, GLenum pname, const GLint *params) asm("glTextureParameterIiv");
void textureParameterIuiv (GLuint texture, GLenum pname, const GLuint *params) asm("glTextureParameterIuiv");
void textureParameterf (GLuint texture, GLenum pname, GLfloat param) asm("glTextureParameterf");
void textureParameterfv (GLuint texture, GLenum pname, const GLfloat *param) asm("glTextureParameterfv");
void textureParameteri (GLuint texture, GLenum pname, GLint param) asm("glTextureParameteri");
void textureParameteriv (GLuint texture, GLenum pname, const GLint *param) asm("glTextureParameteriv");
void textureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) asm("glTextureStorage1D");
void textureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) asm("glTextureStorage2D");
void textureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) asm("glTextureStorage2DMultisample");
void textureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) asm("glTextureStorage3D");
void textureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) asm("glTextureStorage3DMultisample");
void textureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels) asm("glTextureSubImage1D");
void textureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels) asm("glTextureSubImage2D");
void textureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels) asm("glTextureSubImage3D");
void textureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) asm("glTextureView");
void transformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer) asm("glTransformFeedbackBufferBase");
void transformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) asm("glTransformFeedbackBufferRange");
void transformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode) asm("glTransformFeedbackVaryings");
void uniform1d (GLint location, GLdouble x) asm("glUniform1d");
void uniform1dv (GLint location, GLsizei count, const GLdouble *value) asm("glUniform1dv");
void uniform1f (GLint location, GLfloat v0) asm("glUniform1f");
void uniform1fv (GLint location, GLsizei count, const GLfloat *value) asm("glUniform1fv");
void uniform1i (GLint location, GLint v0) asm("glUniform1i");
void uniform1iv (GLint location, GLsizei count, const GLint *value) asm("glUniform1iv");
void uniform1ui (GLint location, GLuint v0) asm("glUniform1ui");
void uniform1uiv (GLint location, GLsizei count, const GLuint *value) asm("glUniform1uiv");
void uniform2d (GLint location, GLdouble x, GLdouble y) asm("glUniform2d");
void uniform2dv (GLint location, GLsizei count, const GLdouble *value) asm("glUniform2dv");
void uniform2f (GLint location, GLfloat v0, GLfloat v1) asm("glUniform2f");
void uniform2fv (GLint location, GLsizei count, const GLfloat *value) asm("glUniform2fv");
void uniform2i (GLint location, GLint v0, GLint v1) asm("glUniform2i");
void uniform2iv (GLint location, GLsizei count, const GLint *value) asm("glUniform2iv");
void uniform2ui (GLint location, GLuint v0, GLuint v1) asm("glUniform2ui");
void uniform2uiv (GLint location, GLsizei count, const GLuint *value) asm("glUniform2uiv");
void uniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z) asm("glUniform3d");
void uniform3dv (GLint location, GLsizei count, const GLdouble *value) asm("glUniform3dv");
void uniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) asm("glUniform3f");
void uniform3fv (GLint location, GLsizei count, const GLfloat *value) asm("glUniform3fv");
void uniform3i (GLint location, GLint v0, GLint v1, GLint v2) asm("glUniform3i");
void uniform3iv (GLint location, GLsizei count, const GLint *value) asm("glUniform3iv");
void uniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2) asm("glUniform3ui");
void uniform3uiv (GLint location, GLsizei count, const GLuint *value) asm("glUniform3uiv");
void uniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) asm("glUniform4d");
void uniform4dv (GLint location, GLsizei count, const GLdouble *value) asm("glUniform4dv");
void uniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) asm("glUniform4f");
void uniform4fv (GLint location, GLsizei count, const GLfloat *value) asm("glUniform4fv");
void uniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) asm("glUniform4i");
void uniform4iv (GLint location, GLsizei count, const GLint *value) asm("glUniform4iv");
void uniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) asm("glUniform4ui");
void uniform4uiv (GLint location, GLsizei count, const GLuint *value) asm("glUniform4uiv");
void uniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) asm("glUniformBlockBinding");
void uniformHandleui64ARB (GLint location, GLuint64 value) asm("glUniformHandleui64ARB");
void uniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 *value) asm("glUniformHandleui64vARB");
void uniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix2dv");
void uniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix2fv");
void uniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix2x3dv");
void uniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix2x3fv");
void uniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix2x4dv");
void uniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix2x4fv");
void uniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix3dv");
void uniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix3fv");
void uniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix3x2dv");
void uniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix3x2fv");
void uniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix3x4dv");
void uniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix3x4fv");
void uniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix4dv");
void uniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix4fv");
void uniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix4x2dv");
void uniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix4x2fv");
void uniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) asm("glUniformMatrix4x3dv");
void uniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) asm("glUniformMatrix4x3fv");
void uniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices) asm("glUniformSubroutinesuiv");
void useProgram (GLuint program) asm("glUseProgram");
void useProgramStages (GLuint pipeline, GLbitfield stages, GLuint program) asm("glUseProgramStages");
void validateProgram (GLuint program) asm("glValidateProgram");
void validateProgramPipeline (GLuint pipeline) asm("glValidateProgramPipeline");
void vertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex) asm("glVertexArrayAttribBinding");
void vertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) asm("glVertexArrayAttribFormat");
void vertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) asm("glVertexArrayAttribIFormat");
void vertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) asm("glVertexArrayAttribLFormat");
void vertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor) asm("glVertexArrayBindingDivisor");
void vertexArrayElementBuffer (GLuint vaobj, GLuint buffer) asm("glVertexArrayElementBuffer");
void vertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) asm("glVertexArrayVertexBuffer");
void vertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides) asm("glVertexArrayVertexBuffers");
void vertexAttrib1d (GLuint index, GLdouble x) asm("glVertexAttrib1d");
void vertexAttrib1dv (GLuint index, const GLdouble *v) asm("glVertexAttrib1dv");
void vertexAttrib1f (GLuint index, GLfloat x) asm("glVertexAttrib1f");
void vertexAttrib1fv (GLuint index, const GLfloat *v) asm("glVertexAttrib1fv");
void vertexAttrib1s (GLuint index, GLshort x) asm("glVertexAttrib1s");
void vertexAttrib1sv (GLuint index, const GLshort *v) asm("glVertexAttrib1sv");
void vertexAttrib2d (GLuint index, GLdouble x, GLdouble y) asm("glVertexAttrib2d");
void vertexAttrib2dv (GLuint index, const GLdouble *v) asm("glVertexAttrib2dv");
void vertexAttrib2f (GLuint index, GLfloat x, GLfloat y) asm("glVertexAttrib2f");
void vertexAttrib2fv (GLuint index, const GLfloat *v) asm("glVertexAttrib2fv");
void vertexAttrib2s (GLuint index, GLshort x, GLshort y) asm("glVertexAttrib2s");
void vertexAttrib2sv (GLuint index, const GLshort *v) asm("glVertexAttrib2sv");
void vertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z) asm("glVertexAttrib3d");
void vertexAttrib3dv (GLuint index, const GLdouble *v) asm("glVertexAttrib3dv");
void vertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z) asm("glVertexAttrib3f");
void vertexAttrib3fv (GLuint index, const GLfloat *v) asm("glVertexAttrib3fv");
void vertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z) asm("glVertexAttrib3s");
void vertexAttrib3sv (GLuint index, const GLshort *v) asm("glVertexAttrib3sv");
void vertexAttrib4Nbv (GLuint index, const GLbyte *v) asm("glVertexAttrib4Nbv");
void vertexAttrib4Niv (GLuint index, const GLint *v) asm("glVertexAttrib4Niv");
void vertexAttrib4Nsv (GLuint index, const GLshort *v) asm("glVertexAttrib4Nsv");
void vertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) asm("glVertexAttrib4Nub");
void vertexAttrib4Nubv (GLuint index, const GLubyte *v) asm("glVertexAttrib4Nubv");
void vertexAttrib4Nuiv (GLuint index, const GLuint *v) asm("glVertexAttrib4Nuiv");
void vertexAttrib4Nusv (GLuint index, const GLushort *v) asm("glVertexAttrib4Nusv");
void vertexAttrib4bv (GLuint index, const GLbyte *v) asm("glVertexAttrib4bv");
void vertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) asm("glVertexAttrib4d");
void vertexAttrib4dv (GLuint index, const GLdouble *v) asm("glVertexAttrib4dv");
void vertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) asm("glVertexAttrib4f");
void vertexAttrib4fv (GLuint index, const GLfloat *v) asm("glVertexAttrib4fv");
void vertexAttrib4iv (GLuint index, const GLint *v) asm("glVertexAttrib4iv");
void vertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) asm("glVertexAttrib4s");
void vertexAttrib4sv (GLuint index, const GLshort *v) asm("glVertexAttrib4sv");
void vertexAttrib4ubv (GLuint index, const GLubyte *v) asm("glVertexAttrib4ubv");
void vertexAttrib4uiv (GLuint index, const GLuint *v) asm("glVertexAttrib4uiv");
void vertexAttrib4usv (GLuint index, const GLushort *v) asm("glVertexAttrib4usv");
void vertexAttribBinding (GLuint attribindex, GLuint bindingindex) asm("glVertexAttribBinding");
void vertexAttribDivisor (GLuint index, GLuint divisor) asm("glVertexAttribDivisor");
void vertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) asm("glVertexAttribFormat");
void vertexAttribI1i (GLuint index, GLint x) asm("glVertexAttribI1i");
void vertexAttribI1iv (GLuint index, const GLint *v) asm("glVertexAttribI1iv");
void vertexAttribI1ui (GLuint index, GLuint x) asm("glVertexAttribI1ui");
void vertexAttribI1uiv (GLuint index, const GLuint *v) asm("glVertexAttribI1uiv");
void vertexAttribI2i (GLuint index, GLint x, GLint y) asm("glVertexAttribI2i");
void vertexAttribI2iv (GLuint index, const GLint *v) asm("glVertexAttribI2iv");
void vertexAttribI2ui (GLuint index, GLuint x, GLuint y) asm("glVertexAttribI2ui");
void vertexAttribI2uiv (GLuint index, const GLuint *v) asm("glVertexAttribI2uiv");
void vertexAttribI3i (GLuint index, GLint x, GLint y, GLint z) asm("glVertexAttribI3i");
void vertexAttribI3iv (GLuint index, const GLint *v) asm("glVertexAttribI3iv");
void vertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z) asm("glVertexAttribI3ui");
void vertexAttribI3uiv (GLuint index, const GLuint *v) asm("glVertexAttribI3uiv");
void vertexAttribI4bv (GLuint index, const GLbyte *v) asm("glVertexAttribI4bv");
void vertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w) asm("glVertexAttribI4i");
void vertexAttribI4iv (GLuint index, const GLint *v) asm("glVertexAttribI4iv");
void vertexAttribI4sv (GLuint index, const GLshort *v) asm("glVertexAttribI4sv");
void vertexAttribI4ubv (GLuint index, const GLubyte *v) asm("glVertexAttribI4ubv");
void vertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) asm("glVertexAttribI4ui");
void vertexAttribI4uiv (GLuint index, const GLuint *v) asm("glVertexAttribI4uiv");
void vertexAttribI4usv (GLuint index, const GLushort *v) asm("glVertexAttribI4usv");
void vertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) asm("glVertexAttribIFormat");
void vertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) asm("glVertexAttribIPointer");
void vertexAttribL1d (GLuint index, GLdouble x) asm("glVertexAttribL1d");
void vertexAttribL1dv (GLuint index, const GLdouble *v) asm("glVertexAttribL1dv");
void vertexAttribL1ui64ARB (GLuint index, GLuint64EXT x) asm("glVertexAttribL1ui64ARB");
void vertexAttribL1ui64vARB (GLuint index, const GLuint64EXT *v) asm("glVertexAttribL1ui64vARB");
void vertexAttribL2d (GLuint index, GLdouble x, GLdouble y) asm("glVertexAttribL2d");
void vertexAttribL2dv (GLuint index, const GLdouble *v) asm("glVertexAttribL2dv");
void vertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z) asm("glVertexAttribL3d");
void vertexAttribL3dv (GLuint index, const GLdouble *v) asm("glVertexAttribL3dv");
void vertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) asm("glVertexAttribL4d");
void vertexAttribL4dv (GLuint index, const GLdouble *v) asm("glVertexAttribL4dv");
void vertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) asm("glVertexAttribLFormat");
void vertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer) asm("glVertexAttribLPointer");
void vertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) asm("glVertexAttribP1ui");
void vertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value) asm("glVertexAttribP1uiv");
void vertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) asm("glVertexAttribP2ui");
void vertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value) asm("glVertexAttribP2uiv");
void vertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) asm("glVertexAttribP3ui");
void vertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value) asm("glVertexAttribP3uiv");
void vertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value) asm("glVertexAttribP4ui");
void vertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value) asm("glVertexAttribP4uiv");
void vertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer) asm("glVertexAttribPointer");
void vertexBindingDivisor (GLuint bindingindex, GLuint divisor) asm("glVertexBindingDivisor");
void viewport (GLint x, GLint y, GLsizei width, GLsizei height) asm("glViewport");
void viewportArrayv (GLuint first, GLsizei count, const GLfloat *v) asm("glViewportArrayv");
void viewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) asm("glViewportIndexedf");
void viewportIndexedfv (GLuint index, const GLfloat *v) asm("glViewportIndexedfv");
void waitSync (GLsync sync, GLbitfield flags, GLuint64 timeout) asm("glWaitSync");
]]
